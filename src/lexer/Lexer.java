/* The following code was generated by JFlex 1.6.1 */

package lexer;
import static scanner.Token.*;
import scanner.Token;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/GItBitBUcket/Compiler-PCL/src/lexer/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\71\1\72\1\1\22\0\1\3\1\0\1\20"+
    "\1\23\3\0\1\21\1\4\1\6\1\5\1\17\1\24\1\13\1\15"+
    "\1\11\12\0\1\33\1\25\1\32\1\31\1\30\2\0\1\34\1\37"+
    "\1\52\1\14\1\16\1\61\1\40\1\56\1\43\1\12\1\65\1\47"+
    "\1\66\1\45\1\46\1\63\1\12\1\35\1\54\1\50\1\62\1\67"+
    "\1\60\1\70\1\36\1\12\1\26\1\22\1\27\1\0\1\12\1\0"+
    "\1\34\1\37\1\52\1\57\1\16\1\61\1\41\1\56\1\44\1\12"+
    "\1\65\1\47\1\66\1\45\1\46\1\63\1\12\1\35\1\55\1\51"+
    "\1\62\1\67\1\60\1\70\1\36\1\12\1\7\1\0\1\10\7\0"+
    "\1\71\252\0\2\42\115\0\1\53\u1ea8\0\1\71\1\71\u0100\0\1\64"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\1\0\1\2\1\0\1\3\1\0\1\4"+
    "\1\5\1\6\1\0\1\7\3\0\1\10\1\11\1\0"+
    "\1\12\1\13\1\0\1\14\4\0\1\5\2\0\1\5"+
    "\4\0\1\5\3\0\1\5\10\0\3\15\2\0\1\16"+
    "\1\17\1\0\3\15\1\0\1\1\1\20\3\21\1\0"+
    "\1\22\1\5\1\23\1\5\1\0\2\5\2\0\1\5"+
    "\1\0\1\5\2\0\1\24\1\25\3\15\1\26\2\0"+
    "\1\15\1\0\1\15\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\35\0\1\5\16\0\3\15\3\0"+
    "\1\1\2\0\1\5\1\0\1\5\2\0\1\5\3\36"+
    "\4\0\2\26\3\37\1\40\1\41\1\42\11\0\3\43"+
    "\1\0\3\44\3\0\3\45\1\0\3\46\5\0\3\47"+
    "\12\0\1\5\22\0\1\5\1\0\1\5\1\0\3\50"+
    "\1\0\1\5\3\51\2\0\1\40\1\0\3\52\11\0"+
    "\3\53\1\0\3\54\11\0\3\55\12\0\3\56\6\0"+
    "\3\57\1\0\3\60\1\0\3\61\2\0\1\5\1\0"+
    "\1\5\3\62\2\0\3\63\1\0\3\64\4\0\3\65"+
    "\2\0\3\66\3\0\3\67\1\0\3\70\1\0\3\71"+
    "\1\0\3\72\2\0\3\73\6\0\3\74\3\0\3\75"+
    "\7\0\1\5\2\76\3\77\3\0\3\100\2\0\3\101"+
    "\2\0\3\102\4\0\3\103\1\0\3\104\1\0\3\105"+
    "\2\0\3\106\4\0\2\76\1\0\1\5\3\107\1\0"+
    "\3\110\3\0\3\111\4\0\3\112\4\0\1\5\3\113"+
    "\1\0\3\114\3\0\3\115\2\0\3\116\1\0\3\117"+
    "\2\0\3\120\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\73\0\73\0\u03eb\0\u0426\0\73\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\261\0\73\0\u0ad5\0\u0b10\0\73"+
    "\0\73\0\u0b4b\0\u0b86\0\u0bc1\0\u0b4b\0\u0bfc\0\u0c37\0\73"+
    "\0\u0c72\0\261\0\73\0\u0cad\0\73\0\u0ce8\0\73\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\73\0\73\0\u0fac\0\u0fe7\0\u033a\0\73"+
    "\0\u1022\0\u105d\0\u105d\0\u1098\0\u10d3\0\u110e\0\73\0\u1149"+
    "\0\73\0\73\0\73\0\u1184\0\73\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1ba8\0\u1c59\0\u1c94\0\u0bc1\0\u0ad5"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\261\0\73\0\u1ea7\0\u1ee2\0\u1f1d\0\u0fe7\0\261"+
    "\0\u0ad5\0\73\0\u0ad5\0\261\0\u1f58\0\73\0\73\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\261\0\73\0\u21e1\0\u221c\0\261\0\73\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\261\0\73\0\u2343\0\u237e\0\261"+
    "\0\73\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\261"+
    "\0\73\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u1c1e\0\u2ade\0\u2b19\0\u2b54\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\261\0\73\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\261\0\73\0\u2d2c\0\u2d67\0\73\0\u2da2\0\u2ddd\0\261"+
    "\0\73\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a"+
    "\0\u2fb5\0\u2ff0\0\u302b\0\261\0\73\0\u3066\0\u30a1\0\261"+
    "\0\73\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\261\0\73\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578"+
    "\0\261\0\73\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\261\0\73\0\u3750\0\u378b\0\261\0\73\0\u37c6"+
    "\0\u3801\0\261\0\73\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928"+
    "\0\u3963\0\261\0\73\0\u399e\0\u39d9\0\u3a14\0\261\0\73"+
    "\0\u3a4f\0\u3a8a\0\261\0\73\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\261\0\73\0\u3bec\0\u3c27\0\u3c62\0\261\0\73"+
    "\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\261\0\73\0\u3d89\0\u3dc4"+
    "\0\261\0\73\0\u3dff\0\u3e3a\0\261\0\73\0\u3e75\0\u3eb0"+
    "\0\261\0\73\0\u3eeb\0\u3f26\0\u3f61\0\261\0\73\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\261\0\73"+
    "\0\u4139\0\u4174\0\u41af\0\u41ea\0\261\0\73\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\261\0\73\0\u44ae\0\u44e9\0\u4524\0\u455f\0\261"+
    "\0\73\0\u459a\0\u45d5\0\u4610\0\261\0\73\0\u464b\0\u4686"+
    "\0\u46c1\0\261\0\73\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8"+
    "\0\261\0\73\0\u4823\0\u485e\0\261\0\73\0\u4899\0\u48d4"+
    "\0\261\0\73\0\u490f\0\u494a\0\u4985\0\261\0\73\0\u49c0"+
    "\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98"+
    "\0\261\0\73\0\u4bd3\0\u4c0e\0\261\0\73\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\261\0\73\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\261\0\73\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48"+
    "\0\u4f83\0\261\0\73\0\u4fbe\0\u4ff9\0\261\0\73\0\u5034"+
    "\0\u506f\0\u50aa\0\u50e5\0\261\0\73\0\u5120\0\u515b\0\u5196"+
    "\0\261\0\73\0\u51d1\0\u520c\0\261\0\73\0\u5247\0\u5282"+
    "\0\u52bd\0\261\0\73\0\u52f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\1\23\1\24\1\25\1\2"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\12\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\12\1\53"+
    "\1\54\1\55\1\56\1\57\1\2\1\12\1\60\1\61"+
    "\1\62\1\0\1\4\1\2\1\63\1\64\1\65\65\2"+
    "\1\66\1\64\2\0\1\4\163\0\1\2\1\63\1\64"+
    "\1\65\1\2\1\67\1\70\62\2\1\66\1\64\1\2"+
    "\1\63\1\64\1\65\25\2\1\71\37\2\1\66\1\64"+
    "\1\72\1\73\1\74\1\75\3\72\1\2\61\72\1\76"+
    "\1\74\1\2\1\63\1\64\1\65\5\2\1\77\17\2"+
    "\1\100\37\2\1\66\1\64\1\12\1\101\1\102\1\103"+
    "\65\12\1\104\1\102\1\2\1\63\1\64\1\65\7\2"+
    "\1\105\1\106\14\2\1\107\7\2\1\110\2\2\1\110"+
    "\4\2\1\110\3\2\1\110\1\2\1\111\11\2\1\66"+
    "\1\64\1\12\1\101\1\102\1\103\10\12\1\112\1\113"+
    "\1\114\22\12\1\112\2\115\1\116\1\12\1\117\2\12"+
    "\1\112\3\12\1\112\13\12\1\104\1\102\1\2\1\63"+
    "\1\64\1\65\10\2\1\120\24\2\1\120\2\2\1\120"+
    "\4\2\1\120\3\2\1\120\13\2\1\66\1\64\1\12"+
    "\1\101\1\102\1\103\41\12\1\121\1\12\1\122\21\12"+
    "\1\104\1\102\1\2\1\63\1\64\1\65\13\2\1\123"+
    "\11\2\1\124\37\2\1\66\1\64\1\20\1\125\1\126"+
    "\1\127\14\20\1\130\1\20\1\2\46\20\1\131\1\126"+
    "\1\132\1\63\1\64\1\133\15\132\2\2\46\132\1\134"+
    "\1\135\1\2\1\63\1\64\1\65\10\2\1\136\24\2"+
    "\1\136\2\2\1\136\4\2\1\136\3\2\1\136\13\2"+
    "\1\66\1\64\1\2\1\63\1\64\1\65\23\2\1\137"+
    "\41\2\1\66\1\64\1\2\1\63\1\64\1\65\24\2"+
    "\1\140\1\141\37\2\1\66\1\64\1\2\1\63\1\64"+
    "\1\65\24\2\1\142\1\143\1\144\36\2\1\66\1\64"+
    "\1\2\1\63\1\64\1\65\25\2\1\145\37\2\1\66"+
    "\1\64\1\12\1\101\1\102\1\103\31\12\1\146\7\12"+
    "\1\147\23\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\12\12\1\150\52\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\12\12\1\151\17\12\1\152\7\12\1\153\22\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\42\12\1\154"+
    "\22\12\1\104\1\102\1\12\1\101\1\102\1\103\10\12"+
    "\1\112\1\113\1\114\22\12\1\112\2\12\1\112\1\12"+
    "\1\154\2\12\1\112\3\12\1\112\13\12\1\104\1\102"+
    "\1\2\1\63\1\64\1\65\41\2\1\155\13\2\1\156"+
    "\7\2\1\66\1\64\1\12\1\101\1\102\1\103\41\12"+
    "\1\155\13\12\1\156\7\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\10\12\1\112\1\113\1\114\22\12\1\112"+
    "\2\12\1\112\1\155\3\12\1\112\3\12\1\112\3\12"+
    "\1\156\7\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\36\12\3\157\1\12\1\160\22\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\31\12\1\161\23\12\1\162\7\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\30\12\1\163"+
    "\11\12\1\164\22\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\31\12\1\165\1\166\7\12\1\167\7\12\1\170"+
    "\12\12\1\104\1\102\1\12\1\101\1\102\1\103\10\12"+
    "\1\112\1\113\1\114\16\12\1\165\1\166\2\12\1\112"+
    "\2\12\1\112\1\12\1\167\2\12\1\112\3\12\1\112"+
    "\1\170\12\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\30\12\1\171\11\12\1\172\7\12\1\173\12\12\1\104"+
    "\1\102\1\2\1\63\1\64\1\65\12\2\1\174\31\2"+
    "\2\175\4\2\1\176\12\2\1\66\1\64\1\12\1\101"+
    "\1\102\1\103\12\12\1\177\31\12\2\200\4\12\1\201"+
    "\12\12\1\104\1\102\1\12\1\101\1\102\1\103\10\12"+
    "\1\112\1\113\1\202\22\12\1\112\2\12\1\112\3\12"+
    "\1\200\1\203\3\12\1\112\1\201\12\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\36\12\3\115\1\12\1\117"+
    "\22\12\1\104\1\102\1\12\1\101\1\102\1\103\31\12"+
    "\1\204\4\12\3\205\11\12\1\206\12\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\30\12\1\207\5\12\3\210"+
    "\1\12\1\211\13\12\1\212\6\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\41\12\1\213\23\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\30\12\1\214\1\215\33\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\42\12\1\216"+
    "\22\12\1\104\1\102\1\12\1\101\1\102\1\103\30\12"+
    "\1\217\34\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\42\12\1\220\22\12\1\104\1\102\2\0\1\64\70\0"+
    "\1\66\1\63\2\64\66\66\1\64\1\221\1\222\1\223"+
    "\1\224\1\221\1\225\63\221\1\226\1\223\1\72\1\73"+
    "\1\74\1\75\4\72\1\5\60\72\1\76\1\74\2\227"+
    "\1\74\5\227\1\4\72\227\1\4\62\227\1\76\1\73"+
    "\2\74\4\76\1\230\61\76\1\74\1\77\1\3\1\4"+
    "\70\77\2\0\1\102\70\0\1\104\1\101\2\102\66\104"+
    "\1\102\1\2\1\63\1\64\1\65\10\2\1\110\1\120"+
    "\1\231\22\2\1\110\2\232\1\233\4\2\1\110\3\2"+
    "\1\110\13\2\1\66\1\64\1\2\1\63\1\64\1\65"+
    "\10\2\1\110\1\120\1\231\22\2\1\110\2\2\1\110"+
    "\4\2\1\110\3\2\1\110\13\2\1\66\1\64\1\2"+
    "\1\63\1\64\1\65\36\2\3\232\24\2\1\66\1\64"+
    "\1\12\1\101\1\102\1\103\10\12\1\112\1\113\1\114"+
    "\22\12\1\112\2\12\1\112\4\12\1\112\3\12\1\112"+
    "\13\12\1\104\1\102\1\12\1\101\1\102\1\103\10\12"+
    "\1\113\1\12\1\114\22\12\1\113\2\12\1\113\4\12"+
    "\1\113\3\12\1\113\13\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\7\12\1\234\1\235\2\12\1\234\21\12"+
    "\1\235\2\12\1\235\4\12\1\235\3\12\1\235\13\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\34\12\2\236"+
    "\25\12\1\237\1\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\10\12\1\112\1\113\1\114\21\12\1\236\1\240"+
    "\2\12\1\112\4\12\1\112\3\12\1\112\11\12\1\237"+
    "\1\12\1\104\1\102\1\117\1\241\1\242\1\243\65\117"+
    "\1\244\1\242\1\2\1\63\1\64\1\65\10\2\1\120"+
    "\1\2\1\231\22\2\1\120\2\2\1\120\4\2\1\120"+
    "\3\2\1\120\13\2\1\66\1\64\1\12\1\101\1\102"+
    "\1\103\10\12\1\245\42\12\1\245\11\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\47\12\3\246\13\12\1\104"+
    "\1\102\2\247\1\126\15\247\1\250\1\247\1\0\70\247"+
    "\1\250\1\247\1\0\50\247\1\131\1\125\2\126\14\131"+
    "\1\251\1\131\1\66\47\131\1\126\1\2\1\63\1\64"+
    "\1\65\15\2\1\252\47\2\1\66\1\64\1\66\1\63"+
    "\2\64\15\66\1\253\50\66\1\64\21\0\1\254\51\0"+
    "\1\2\1\63\1\64\1\65\10\2\1\255\24\2\1\255"+
    "\2\2\1\255\4\2\1\255\3\2\1\255\13\2\1\66"+
    "\1\64\1\2\1\63\1\64\1\65\25\2\1\256\37\2"+
    "\1\66\1\64\1\2\1\63\1\64\1\65\25\2\1\257"+
    "\37\2\1\66\1\64\1\12\1\101\1\102\1\103\31\12"+
    "\1\260\33\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\10\12\1\261\42\12\1\261\11\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\30\12\1\262\15\12\1\263\10\12"+
    "\1\264\5\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\34\12\2\265\27\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\44\12\2\266\17\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\42\12\1\267\22\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\44\12\2\270\17\12\1\104\1\102"+
    "\1\155\1\271\1\272\1\273\65\155\1\274\1\272\1\156"+
    "\1\275\1\276\1\277\65\156\1\300\1\276\1\12\1\101"+
    "\1\102\1\103\43\12\1\301\21\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\44\12\2\302\17\12\1\104\1\102"+
    "\1\161\1\303\1\304\1\305\65\161\1\306\1\304\1\162"+
    "\1\307\1\310\1\311\65\162\1\312\1\310\1\12\1\101"+
    "\1\102\1\103\33\12\1\313\31\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\41\12\1\314\23\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\56\12\1\315\6\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\57\12\1\316\5\12"+
    "\1\104\1\102\1\167\1\317\1\320\1\321\65\167\1\322"+
    "\1\320\1\12\1\101\1\102\1\103\12\12\1\323\52\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\47\12\3\324"+
    "\13\12\1\104\1\102\1\12\1\101\1\102\1\103\41\12"+
    "\1\325\23\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\30\12\1\326\34\12\1\104\1\102\1\2\1\63\1\64"+
    "\1\65\44\2\2\327\17\2\1\66\1\64\1\2\1\63"+
    "\1\64\1\65\31\2\1\330\33\2\1\66\1\64\1\2"+
    "\1\63\1\64\1\65\42\2\1\331\22\2\1\66\1\64"+
    "\1\12\1\101\1\102\1\103\44\12\2\327\17\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\31\12\1\332\33\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\42\12\1\333"+
    "\22\12\1\104\1\102\1\12\1\101\1\102\1\103\7\12"+
    "\1\234\1\235\2\12\1\234\21\12\1\235\2\12\1\235"+
    "\3\12\1\327\1\334\3\12\1\235\13\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\10\12\1\112\1\113\1\114"+
    "\16\12\1\332\3\12\1\112\2\12\1\112\4\12\1\112"+
    "\3\12\1\112\13\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\36\12\3\335\24\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\44\12\2\336\17\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\36\12\3\337\24\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\43\12\1\340\21\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\43\12\1\341\21\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\31\12\1\342"+
    "\33\12\1\104\1\102\1\12\1\101\1\102\1\103\41\12"+
    "\1\343\23\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\44\12\2\344\17\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\46\12\1\345\16\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\42\12\1\346\22\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\10\12\1\347\42\12\1\347\11\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\31\12\1\350"+
    "\33\12\1\104\1\102\1\12\1\101\1\102\1\103\31\12"+
    "\1\351\33\12\1\104\1\102\1\221\1\222\1\223\1\224"+
    "\1\221\1\352\63\221\1\226\1\223\2\353\1\223\2\353"+
    "\1\354\72\353\1\354\65\353\1\2\1\63\1\64\1\65"+
    "\1\2\1\225\1\5\62\2\1\66\1\64\1\226\1\222"+
    "\2\223\1\226\1\355\64\226\1\223\1\2\1\63\1\64"+
    "\1\65\7\2\1\356\1\357\2\2\1\356\21\2\1\357"+
    "\2\2\1\357\4\2\1\357\3\2\1\357\13\2\1\66"+
    "\1\64\1\2\1\63\1\64\1\65\34\2\2\360\27\2"+
    "\1\66\1\64\1\2\1\63\1\64\1\65\10\2\1\110"+
    "\1\120\1\231\21\2\1\360\1\361\2\2\1\110\4\2"+
    "\1\110\3\2\1\110\13\2\1\66\1\64\1\12\1\101"+
    "\1\102\1\103\10\12\1\235\24\12\1\235\2\12\1\235"+
    "\4\12\1\235\3\12\1\235\13\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\36\12\3\362\24\12\1\104\1\102"+
    "\1\237\1\363\1\364\1\365\65\237\1\366\1\364\1\12"+
    "\1\101\1\102\1\103\10\12\1\112\1\113\1\114\22\12"+
    "\1\112\2\362\1\367\4\12\1\112\3\12\1\112\13\12"+
    "\1\104\1\102\2\0\1\242\70\0\1\244\1\241\2\242"+
    "\66\244\1\242\1\245\1\370\1\371\1\372\65\245\1\373"+
    "\1\371\1\12\1\101\1\102\1\103\12\12\1\374\52\12"+
    "\1\104\1\102\1\2\1\63\1\64\1\65\10\2\1\375"+
    "\24\2\1\375\2\2\1\375\4\2\1\375\3\2\1\375"+
    "\13\2\1\66\1\64\1\12\1\101\1\102\1\103\30\12"+
    "\1\376\34\12\1\104\1\102\1\261\1\377\1\u0100\1\u0101"+
    "\65\261\1\u0102\1\u0100\1\12\1\101\1\102\1\103\10\12"+
    "\1\u0103\32\12\1\u0104\7\12\1\u0103\11\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\42\12\1\u0105\22\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\12\12\1\u0106\52\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\36\12\3\u0107"+
    "\24\12\1\104\1\102\1\12\1\101\1\102\1\103\12\12"+
    "\1\u0108\52\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\43\12\1\u0109\21\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\42\12\1\u010a\22\12\1\104\1\102\2\0\1\272"+
    "\70\0\1\274\1\271\2\272\66\274\1\272\2\0\1\276"+
    "\70\0\1\300\1\275\2\276\66\300\1\276\1\301\1\u010b"+
    "\1\u010c\1\u010d\65\301\1\u010e\1\u010c\1\302\1\u010f\1\u0110"+
    "\1\u0111\65\302\1\u0112\1\u0110\2\0\1\304\70\0\1\306"+
    "\1\303\2\304\66\306\1\304\2\0\1\310\70\0\1\312"+
    "\1\307\2\310\66\312\1\310\1\12\1\101\1\102\1\103"+
    "\12\12\1\u0113\52\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\34\12\2\u0114\27\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\12\12\1\u0115\52\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\12\12\1\u0116\52\12\1\104\1\102"+
    "\2\0\1\320\70\0\1\322\1\317\2\320\66\322\1\320"+
    "\1\12\1\101\1\102\1\103\41\12\1\u0117\23\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\12\12\1\u0118\52\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\47\12\3\u0119"+
    "\13\12\1\104\1\102\1\12\1\101\1\102\1\103\31\12"+
    "\1\u011a\33\12\1\104\1\102\1\327\1\u011b\1\u011c\1\u011d"+
    "\65\327\1\u011e\1\u011c\1\2\1\63\1\64\1\65\36\2"+
    "\3\u011f\24\2\1\66\1\64\1\2\1\63\1\64\1\65"+
    "\31\2\1\u0120\33\2\1\66\1\64\1\12\1\101\1\102"+
    "\1\103\36\12\3\u0121\24\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\31\12\1\u0122\33\12\1\104\1\102\1\327"+
    "\1\u011b\1\u011c\1\u011d\10\327\1\334\24\327\1\334\2\327"+
    "\1\334\4\327\1\334\3\327\1\334\13\327\1\u011e\1\u011c"+
    "\1\12\1\101\1\102\1\103\44\12\2\u0123\17\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\52\12\1\u0124\12\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\43\12\1\u0125"+
    "\21\12\1\104\1\102\1\12\1\101\1\102\1\103\47\12"+
    "\3\u0126\13\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\12\12\1\u0127\52\12\1\104\1\102\1\342\1\u0128\1\u0129"+
    "\1\u012a\65\342\1\u012b\1\u0129\1\12\1\101\1\102\1\103"+
    "\46\12\1\u012c\16\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\36\12\3\u012d\24\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\60\12\2\u012e\3\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\34\12\2\u012f\10\12\1\u0130\16\12"+
    "\1\104\1\102\1\347\1\u0131\1\u0132\1\u0133\65\347\1\u0134"+
    "\1\u0132\1\350\1\u0135\1\u0136\1\u0137\65\350\1\u0138\1\u0136"+
    "\1\351\1\u0139\1\u013a\1\u013b\65\351\1\u013c\1\u013a\1\221"+
    "\1\222\1\223\1\224\1\221\1\352\1\5\62\221\1\226"+
    "\1\223\5\353\1\354\1\4\64\353\1\226\1\222\2\223"+
    "\1\226\1\355\1\230\63\226\1\223\1\2\1\63\1\64"+
    "\1\65\10\2\1\357\24\2\1\357\2\2\1\357\4\2"+
    "\1\357\3\2\1\357\13\2\1\66\1\64\1\2\1\63"+
    "\1\64\1\65\36\2\3\u013d\24\2\1\66\1\64\1\2"+
    "\1\63\1\64\1\65\10\2\1\110\1\120\1\231\22\2"+
    "\1\110\2\u013d\1\u013e\4\2\1\110\3\2\1\110\13\2"+
    "\1\66\1\64\1\12\1\101\1\102\1\103\44\12\2\u013f"+
    "\17\12\1\104\1\102\2\0\1\364\70\0\1\366\1\363"+
    "\2\364\66\366\1\364\1\12\1\101\1\102\1\103\10\12"+
    "\1\112\1\113\1\114\22\12\1\112\2\12\1\112\3\12"+
    "\1\u013f\1\u0140\3\12\1\112\13\12\1\104\1\102\2\0"+
    "\1\371\70\0\1\373\1\370\2\371\66\373\1\371\1\374"+
    "\1\u0141\1\u0142\1\u0143\65\374\1\u0144\1\u0142\1\12\1\101"+
    "\1\102\1\103\32\12\1\u0145\32\12\1\104\1\102\2\0"+
    "\1\u0100\70\0\1\u0102\1\377\2\u0100\66\u0102\1\u0100\1\u0103"+
    "\1\u0146\1\u0147\1\u0148\65\u0103\1\u0149\1\u0147\1\u0104\1\u014a"+
    "\1\u014b\1\u014c\65\u0104\1\u014d\1\u014b\1\12\1\101\1\102"+
    "\1\103\31\12\1\u014e\33\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\30\12\1\u014f\34\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\41\12\1\u0150\23\12\1\104\1\102"+
    "\1\u0108\1\u0151\1\u0152\1\u0153\65\u0108\1\u0154\1\u0152\1\12"+
    "\1\101\1\102\1\103\12\12\1\u0155\52\12\1\104\1\102"+
    "\1\u010a\1\u0156\1\u0157\1\u0158\65\u010a\1\u0159\1\u0157\2\0"+
    "\1\u010c\70\0\1\u010e\1\u010b\2\u010c\66\u010e\1\u010c\2\0"+
    "\1\u0110\70\0\1\u0112\1\u010f\2\u0110\66\u0112\1\u0110\1\12"+
    "\1\101\1\102\1\103\43\12\1\u015a\21\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\36\12\3\u015b\24\12\1\104"+
    "\1\102\1\u0115\1\u015c\1\u015d\1\u015e\65\u0115\1\u015f\1\u015d"+
    "\1\u0116\1\u0160\1\u0161\1\u0162\65\u0116\1\u0163\1\u0161\1\u0117"+
    "\1\u0164\1\u0165\1\u0166\65\u0117\1\u0167\1\u0165\1\u0118\1\u0168"+
    "\1\u0169\1\u016a\65\u0118\1\u016b\1\u0169\1\12\1\101\1\102"+
    "\1\103\44\12\2\u016c\17\12\1\104\1\102\1\u011a\1\u016d"+
    "\1\u016e\1\u016f\65\u011a\1\u0170\1\u016e\2\0\1\u011c\70\0"+
    "\1\u011e\1\u011b\2\u011c\66\u011e\1\u011c\1\2\1\63\1\64"+
    "\1\65\41\2\1\u0171\23\2\1\66\1\64\1\2\1\63"+
    "\1\64\1\65\44\2\2\u0172\17\2\1\66\1\64\1\12"+
    "\1\101\1\102\1\103\41\12\1\u0173\23\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\44\12\2\u0174\17\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\12\12\1\u0175\52\12"+
    "\1\104\1\102\1\u0124\1\u0176\1\u0177\1\u0178\65\u0124\1\u0179"+
    "\1\u0177\1\12\1\101\1\102\1\103\12\12\1\u017a\52\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\12\12\1\u017b"+
    "\52\12\1\104\1\102\1\u0127\1\u017c\1\u017d\1\u017e\65\u0127"+
    "\1\u017f\1\u017d\2\0\1\u0129\70\0\1\u012b\1\u0128\2\u0129"+
    "\66\u012b\1\u0129\1\12\1\101\1\102\1\103\44\12\2\u0180"+
    "\17\12\1\104\1\102\1\12\1\101\1\102\1\103\43\12"+
    "\1\u0181\21\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\12\12\1\u0182\52\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\31\12\1\u0183\33\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\12\12\1\u0184\52\12\1\104\1\102\2\0"+
    "\1\u0132\70\0\1\u0134\1\u0131\2\u0132\66\u0134\1\u0132\2\0"+
    "\1\u0136\70\0\1\u0138\1\u0135\2\u0136\66\u0138\1\u0136\2\0"+
    "\1\u013a\70\0\1\u013c\1\u0139\2\u013a\66\u013c\1\u013a\1\2"+
    "\1\63\1\64\1\65\44\2\2\u0185\17\2\1\66\1\64"+
    "\1\2\1\63\1\64\1\65\10\2\1\110\1\120\1\231"+
    "\22\2\1\110\2\2\1\110\3\2\1\u0185\1\u0186\3\2"+
    "\1\110\13\2\1\66\1\64\1\12\1\101\1\102\1\103"+
    "\47\12\3\u0187\13\12\1\104\1\102\1\12\1\101\1\102"+
    "\1\103\10\12\1\112\1\113\1\114\22\12\1\112\2\12"+
    "\1\112\4\12\1\112\1\12\2\u0187\1\u0188\13\12\1\104"+
    "\1\102\2\0\1\u0142\70\0\1\u0144\1\u0141\2\u0142\66\u0144"+
    "\1\u0142\1\u0145\1\u0189\1\u018a\1\u018b\65\u0145\1\u018c\1\u018a"+
    "\2\0\1\u0147\70\0\1\u0149\1\u0146\2\u0147\66\u0149\1\u0147"+
    "\2\0\1\u014b\70\0\1\u014d\1\u014a\2\u014b\66\u014d\1\u014b"+
    "\1\12\1\101\1\102\1\103\10\12\1\u018d\42\12\1\u018d"+
    "\11\12\1\104\1\102\1\12\1\101\1\102\1\103\44\12"+
    "\2\u018e\17\12\1\104\1\102\1\u0150\1\u018f\1\u0190\1\u0191"+
    "\65\u0150\1\u0192\1\u0190\2\0\1\u0152\70\0\1\u0154\1\u0151"+
    "\2\u0152\66\u0154\1\u0152\1\12\1\101\1\102\1\103\30\12"+
    "\1\u0193\34\12\1\104\1\102\2\0\1\u0157\70\0\1\u0159"+
    "\1\u0156\2\u0157\66\u0159\1\u0157\1\u015a\1\u0194\1\u0195\1\u0196"+
    "\65\u015a\1\u0197\1\u0195\1\12\1\101\1\102\1\103\41\12"+
    "\1\u0198\23\12\1\104\1\102\2\0\1\u015d\70\0\1\u015f"+
    "\1\u015c\2\u015d\66\u015f\1\u015d\2\0\1\u0161\70\0\1\u0163"+
    "\1\u0160\2\u0161\66\u0163\1\u0161\2\0\1\u0165\70\0\1\u0167"+
    "\1\u0164\2\u0165\66\u0167\1\u0165\2\0\1\u0169\70\0\1\u016b"+
    "\1\u0168\2\u0169\66\u016b\1\u0169\1\u016c\1\u0199\1\u019a\1\u019b"+
    "\65\u016c\1\u019c\1\u019a\2\0\1\u016e\70\0\1\u0170\1\u016d"+
    "\2\u016e\66\u0170\1\u016e\1\2\1\63\1\64\1\65\34\2"+
    "\2\u019d\27\2\1\66\1\64\1\2\1\63\1\64\1\65"+
    "\36\2\3\u019e\24\2\1\66\1\64\1\12\1\101\1\102"+
    "\1\103\34\12\2\u019d\27\12\1\104\1\102\1\12\1\101"+
    "\1\102\1\103\36\12\3\u019f\24\12\1\104\1\102\1\u0175"+
    "\1\u01a0\1\u01a1\1\u01a2\65\u0175\1\u01a3\1\u01a1\2\0\1\u0177"+
    "\70\0\1\u0179\1\u0176\2\u0177\66\u0179\1\u0177\1\u017a\1\u01a4"+
    "\1\u01a5\1\u01a6\65\u017a\1\u01a7\1\u01a5\1\u017b\1\u01a8\1\u01a9"+
    "\1\u01aa\65\u017b\1\u01ab\1\u01a9\2\0\1\u017d\70\0\1\u017f"+
    "\1\u017c\2\u017d\66\u017f\1\u017d\1\12\1\101\1\102\1\103"+
    "\36\12\3\u01ac\24\12\1\104\1\102\1\u0181\1\u01ad\1\u01ae"+
    "\1\u01af\65\u0181\1\u01b0\1\u01ae\1\12\1\101\1\102\1\103"+
    "\10\12\1\u01b1\42\12\1\u01b1\11\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\30\12\1\u01b2\34\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\10\12\1\u01b3\42\12\1\u01b3"+
    "\11\12\1\104\1\102\1\2\1\63\1\64\1\65\47\2"+
    "\3\u01b4\13\2\1\66\1\64\1\2\1\63\1\64\1\65"+
    "\10\2\1\110\1\120\1\231\22\2\1\110\2\2\1\110"+
    "\4\2\1\110\1\2\2\u01b4\1\u01b5\13\2\1\66\1\64"+
    "\1\12\1\101\1\102\1\103\10\12\1\u01b6\42\12\1\u01b6"+
    "\11\12\1\104\1\102\1\12\1\101\1\102\1\103\10\12"+
    "\1\u01b7\1\113\1\114\22\12\1\112\2\12\1\112\4\12"+
    "\1\112\3\12\1\112\1\12\1\u01b6\11\12\1\104\1\102"+
    "\2\0\1\u018a\70\0\1\u018c\1\u0189\2\u018a\66\u018c\1\u018a"+
    "\1\u018d\1\u01b8\1\u01b9\1\u01ba\65\u018d\1\u01bb\1\u01b9\1\u018e"+
    "\1\u01bc\1\u01bd\1\u01be\65\u018e\1\u01bf\1\u01bd\2\0\1\u0190"+
    "\70\0\1\u0192\1\u018f\2\u0190\66\u0192\1\u0190\1\12\1\101"+
    "\1\102\1\103\41\12\1\u01c0\23\12\1\104\1\102\2\0"+
    "\1\u0195\70\0\1\u0197\1\u0194\2\u0195\66\u0197\1\u0195\1\12"+
    "\1\101\1\102\1\103\44\12\2\u01c1\17\12\1\104\1\102"+
    "\2\0\1\u019a\70\0\1\u019c\1\u0199\2\u019a\66\u019c\1\u019a"+
    "\1\u019d\1\u01c2\1\u01c3\1\u01c4\65\u019d\1\u01c5\1\u01c3\1\2"+
    "\1\63\1\64\1\65\41\2\1\u01c6\23\2\1\66\1\64"+
    "\1\12\1\101\1\102\1\103\41\12\1\u01c7\23\12\1\104"+
    "\1\102\2\0\1\u01a1\70\0\1\u01a3\1\u01a0\2\u01a1\66\u01a3"+
    "\1\u01a1\2\0\1\u01a5\70\0\1\u01a7\1\u01a4\2\u01a5\66\u01a7"+
    "\1\u01a5\2\0\1\u01a9\70\0\1\u01ab\1\u01a8\2\u01a9\66\u01ab"+
    "\1\u01a9\1\12\1\101\1\102\1\103\42\12\1\u01c8\22\12"+
    "\1\104\1\102\2\0\1\u01ae\70\0\1\u01b0\1\u01ad\2\u01ae"+
    "\66\u01b0\1\u01ae\1\u01b1\1\u01c9\1\u01ca\1\u01cb\65\u01b1\1\u01cc"+
    "\1\u01ca\1\12\1\101\1\102\1\103\62\12\1\u01cd\2\12"+
    "\1\104\1\102\1\12\1\101\1\102\1\103\56\12\1\u01ce"+
    "\6\12\1\104\1\102\1\2\1\63\1\64\1\65\10\2"+
    "\1\111\42\2\1\111\11\2\1\66\1\64\1\2\1\63"+
    "\1\64\1\65\10\2\1\106\1\120\1\231\22\2\1\110"+
    "\2\2\1\110\4\2\1\110\3\2\1\110\1\2\1\111"+
    "\11\2\1\66\1\64\1\12\1\101\1\102\1\103\36\12"+
    "\3\u01cf\24\12\1\104\1\102\1\12\1\101\1\102\1\103"+
    "\10\12\1\112\1\113\1\114\22\12\1\112\2\u01cf\1\u01d0"+
    "\4\12\1\112\3\12\1\112\13\12\1\104\1\102\2\0"+
    "\1\u01b9\70\0\1\u01bb\1\u01b8\2\u01b9\66\u01bb\1\u01b9\2\0"+
    "\1\u01bd\70\0\1\u01bf\1\u01bc\2\u01bd\66\u01bf\1\u01bd\1\u01c0"+
    "\1\u01d1\1\u01d2\1\u01d3\65\u01c0\1\u01d4\1\u01d2\1\u01c1\1\u01d5"+
    "\1\u01d6\1\u01d7\65\u01c1\1\u01d8\1\u01d6\2\0\1\u01c3\70\0"+
    "\1\u01c5\1\u01c2\2\u01c3\66\u01c5\1\u01c3\1\2\1\63\1\64"+
    "\1\65\44\2\2\u01d9\17\2\1\66\1\64\1\12\1\101"+
    "\1\102\1\103\44\12\2\u01d9\17\12\1\104\1\102\1\12"+
    "\1\101\1\102\1\103\41\12\1\u01da\23\12\1\104\1\102"+
    "\2\0\1\u01ca\70\0\1\u01cc\1\u01c9\2\u01ca\66\u01cc\1\u01ca"+
    "\1\u01cd\1\u01db\1\u01dc\1\u01dd\65\u01cd\1\u01de\1\u01dc\1\12"+
    "\1\101\1\102\1\103\31\12\1\u01df\33\12\1\104\1\102"+
    "\1\12\1\101\1\102\1\103\34\12\2\236\27\12\1\104"+
    "\1\102\1\12\1\101\1\102\1\103\10\12\1\112\1\113"+
    "\1\114\21\12\1\236\1\240\2\12\1\112\4\12\1\112"+
    "\3\12\1\112\13\12\1\104\1\102\2\0\1\u01d2\70\0"+
    "\1\u01d4\1\u01d1\2\u01d2\66\u01d4\1\u01d2\2\0\1\u01d6\70\0"+
    "\1\u01d8\1\u01d5\2\u01d6\66\u01d8\1\u01d6\1\u01d9\1\u01e0\1\u01e1"+
    "\1\u01e2\65\u01d9\1\u01e3\1\u01e1\1\u01da\1\u01e4\1\u01e5\1\u01e6"+
    "\65\u01da\1\u01e7\1\u01e5\2\0\1\u01dc\70\0\1\u01de\1\u01db"+
    "\2\u01dc\66\u01de\1\u01dc\1\12\1\101\1\102\1\103\12\12"+
    "\1\u01e8\52\12\1\104\1\102\2\0\1\u01e1\70\0\1\u01e3"+
    "\1\u01e0\2\u01e1\66\u01e3\1\u01e1\2\0\1\u01e5\70\0\1\u01e7"+
    "\1\u01e4\2\u01e5\66\u01e7\1\u01e5\1\u01e8\1\u01e9\1\u01ea\1\u01eb"+
    "\65\u01e8\1\u01ec\1\u01ea\2\0\1\u01ea\70\0\1\u01ec\1\u01e9"+
    "\2\u01ea\66\u01ec\1\u01ea";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21299];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\3\0\2\1\1\0\2\1"+
    "\1\0\1\1\4\0\1\1\2\0\1\1\4\0\1\1"+
    "\3\0\1\1\10\0\1\1\1\11\1\1\2\0\2\1"+
    "\1\0\3\1\1\0\3\1\1\11\1\1\1\0\4\1"+
    "\1\0\2\1\2\0\1\1\1\0\1\1\2\0\6\1"+
    "\2\0\1\1\1\0\1\1\1\0\7\1\35\0\1\1"+
    "\16\0\3\1\3\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\11\1\1\4\0\1\11\3\1\1\11"+
    "\3\1\11\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\3\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\5\0\1\1\1\11\1\1\12\0\1\1\22\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\11\1\1\2\0\1\1\1\0\1\1\1\11"+
    "\1\1\11\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\11\0\1\1\1\11\1\1\12\0\1\1\1\11"+
    "\1\1\6\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\2\0\1\1\1\0"+
    "\2\1\1\11\1\1\2\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\4\0\1\1\1\11\1\1\2\0"+
    "\1\1\1\11\1\1\3\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\2\0\1\1\1\11\1\1\6\0"+
    "\1\1\1\11\1\1\3\0\1\1\1\11\1\1\7\0"+
    "\4\1\1\11\1\1\3\0\1\1\1\11\1\1\2\0"+
    "\1\1\1\11\1\1\2\0\1\1\1\11\1\1\4\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\2\0\1\1\1\11\1\1\4\0"+
    "\2\1\1\0\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\3\0\1\1\1\11\1\1\4\0\1\1\1\11"+
    "\1\1\4\0\2\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\3\0\1\1\1\11\1\1\2\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\2\0\1\1\1\11"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public Integer line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignore*/
            }
          case 81: break;
          case 2: 
            { lexeme=yytext(); line=yyline; return TIMES;
            }
          case 82: break;
          case 3: 
            { lexeme=yytext(); line=yyline; return DIV;
            }
          case 83: break;
          case 4: 
            { lexeme=yytext(); line=yyline; return MINUS;
            }
          case 84: break;
          case 5: 
            { lexeme=yytext(); line=yyline; return FLOAT_LITERAL;
            }
          case 85: break;
          case 6: 
            { lexeme=yytext(); line=yyline; return PERIOD;
            }
          case 86: break;
          case 7: 
            { lexeme=yytext(); line=yyline; return PLUS;
            }
          case 87: break;
          case 8: 
            { lexeme=yytext(); line=yyline; return COMMA;
            }
          case 88: break;
          case 9: 
            { lexeme=yytext(); line=yyline; return SEMICOLON;
            }
          case 89: break;
          case 10: 
            { lexeme=yytext(); line=yyline; return GREATER_THAN;
            }
          case 90: break;
          case 11: 
            { lexeme=yytext(); line=yyline; return ASSIGN;
            }
          case 91: break;
          case 12: 
            { lexeme=yytext(); line=yyline; return COLON;
            }
          case 92: break;
          case 13: 
            { lexeme=yytext(); line=yyline;return ERROR;
            }
          case 93: break;
          case 14: 
            { lexeme=yytext(); line=yyline; return PARENT;
            }
          case 94: break;
          case 15: 
            { lexeme=yytext(); line=yyline; return TIMES_ASSIGN;
            }
          case 95: break;
          case 16: 
            { lexeme=yytext(); line=yyline; return DIV_ASSIGN;
            }
          case 96: break;
          case 17: 
            { lexeme=yytext(); line=yyline; if(yylength()<128){ return ID;}else{ return ERROR_ID;}
            }
          case 97: break;
          case 18: 
            { lexeme=yytext(); line=yyline; return MINUS_MINUS;
            }
          case 98: break;
          case 19: 
            { lexeme=yytext(); line=yyline; return MINUS_ASSIGN;
            }
          case 99: break;
          case 20: 
            { lexeme=yytext(); line=yyline; return PLUS_PLUS;
            }
          case 100: break;
          case 21: 
            { lexeme=yytext(); line=yyline; return SUM_ASSIGN;
            }
          case 101: break;
          case 22: 
            { lexeme=yytext(); line=yyline; return STRING_LITERAL;
            }
          case 102: break;
          case 23: 
            { lexeme=yytext(); line=yyline; return COL;
            }
          case 103: break;
          case 24: 
            { lexeme=yytext(); line=yyline; return LEFT;
            }
          case 104: break;
          case 25: 
            { lexeme=yytext(); line=yyline; return GREATER_OR_EQUAL_THAN;
            }
          case 105: break;
          case 26: 
            { lexeme=yytext(); line=yyline; return LESS_GREATER;
            }
          case 106: break;
          case 27: 
            { lexeme=yytext(); line=yyline; return LESS_OR_EQUAL_THAN;
            }
          case 107: break;
          case 28: 
            { lexeme=yytext(); line=yyline; return RIGHT;
            }
          case 108: break;
          case 29: 
            { lexeme=yytext(); line=yyline; return COLON_ASSIGN;
            }
          case 109: break;
          case 30: 
            { lexeme=yytext(); line=yyline; return DO;
            }
          case 110: break;
          case 31: 
            { lexeme=yytext(); line=yyline; return CHAR_LITERAL;
            }
          case 111: break;
          case 32: 
            { lexeme=yytext(); line=yyline; return CHAR_MADE_INT_LITERAL;
            }
          case 112: break;
          case 33: 
            { lexeme=yytext(); line=yyline; return LEFT_ASSIGN;
            }
          case 113: break;
          case 34: 
            { lexeme=yytext(); line=yyline; return RIGHT_ASSIGN;
            }
          case 114: break;
          case 35: 
            { lexeme=yytext(); line=yyline; return IN;
            }
          case 115: break;
          case 36: 
            { lexeme=yytext(); line=yyline; return IF;
            }
          case 116: break;
          case 37: 
            { lexeme=yytext(); line=yyline; return OR;
            }
          case 117: break;
          case 38: 
            { lexeme=yytext(); line=yyline; return OF;
            }
          case 118: break;
          case 39: 
            { lexeme=yytext(); line=yyline; return TO;
            }
          case 119: break;
          case 40: 
            { lexeme=yytext(); line=yyline; return DIV_WORD;
            }
          case 120: break;
          case 41: 
            { lexeme=yytext(); line=yyline; return END;
            }
          case 121: break;
          case 42: 
            { lexeme=yytext(); line=yyline; return AND;
            }
          case 122: break;
          case 43: 
            { lexeme=yytext(); line=yyline; return NIL;
            }
          case 123: break;
          case 44: 
            { lexeme=yytext(); line=yyline; return NOT;
            }
          case 124: break;
          case 45: 
            { lexeme=yytext(); line=yyline; return SET;
            }
          case 125: break;
          case 46: 
            { lexeme=yytext(); line=yyline; return FOR;
            }
          case 126: break;
          case 47: 
            { lexeme=yytext(); line=yyline; return MOD;
            }
          case 127: break;
          case 48: 
            { lexeme=yytext(); line=yyline; return VAR;
            }
          case 128: break;
          case 49: 
            { lexeme=yytext(); line=yyline; return XOR;
            }
          case 129: break;
          case 50: 
            { lexeme=yytext(); line=yyline; return ELSE;
            }
          case 130: break;
          case 51: 
            { lexeme=yytext(); line=yyline; return READ;
            }
          case 131: break;
          case 52: 
            { lexeme=yytext(); line=yyline; return REAL;
            }
          case 132: break;
          case 53: 
            { lexeme=yytext(); line=yyline; return BYTE;
            }
          case 133: break;
          case 54: 
            { lexeme=yytext(); line=yyline; return GOTO;
            }
          case 134: break;
          case 55: 
            { lexeme=yytext(); line=yyline; return TRUE;
            }
          case 135: break;
          case 56: 
            { lexeme=yytext(); line=yyline; return TYPE;
            }
          case 136: break;
          case 57: 
            { lexeme=yytext(); line=yyline; return THEN;
            }
          case 137: break;
          case 58: 
            { lexeme=yytext(); line=yyline; return CASE;
            }
          case 138: break;
          case 59: 
            { lexeme=yytext(); line=yyline; return CHAR;
            }
          case 139: break;
          case 60: 
            { lexeme=yytext(); line=yyline; return WITH;
            }
          case 140: break;
          case 61: 
            { lexeme=yytext(); line=yyline; return FILE;
            }
          case 141: break;
          case 62: 
            { lexeme=yytext(); line=yyline; return INT_LITERAL;
            }
          case 142: break;
          case 63: 
            { lexeme=yytext(); line=yyline; return ARRAY;
            }
          case 143: break;
          case 64: 
            { lexeme=yytext(); line=yyline; return BEGIN;
            }
          case 144: break;
          case 65: 
            { lexeme=yytext(); line=yyline; return LABEL;
            }
          case 145: break;
          case 66: 
            { lexeme=yytext(); line=yyline; return CONST;
            }
          case 146: break;
          case 67: 
            { lexeme=yytext(); line=yyline; return WRITE;
            }
          case 147: break;
          case 68: 
            { lexeme=yytext(); line=yyline; return WHILE;
            }
          case 148: break;
          case 69: 
            { lexeme=yytext(); line=yyline; return FALSE;
            }
          case 149: break;
          case 70: 
            { lexeme=yytext(); line=yyline; return UNTIL;
            }
          case 150: break;
          case 71: 
            { lexeme=yytext(); line=yyline; return RECORD;
            }
          case 151: break;
          case 72: 
            { lexeme=yytext(); line=yyline; return REPEAT;
            }
          case 152: break;
          case 73: 
            { lexeme=yytext(); line=yyline; return STRING;
            }
          case 153: break;
          case 74: 
            { lexeme=yytext(); line=yyline; return PACKED;
            }
          case 154: break;
          case 75: 
            { lexeme=yytext(); line=yyline; return BOOLEAN;
            }
          case 155: break;
          case 76: 
            { lexeme=yytext(); line=yyline; return LONGINT;
            }
          case 156: break;
          case 77: 
            { lexeme=yytext(); line=yyline; return PROGRAM;
            }
          case 157: break;
          case 78: 
            { lexeme=yytext(); line=yyline; return SHORTINT;
            }
          case 158: break;
          case 79: 
            { lexeme=yytext(); line=yyline; return FUNCTION;
            }
          case 159: break;
          case 80: 
            { lexeme=yytext(); line=yyline; return PROCEDURE;
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
