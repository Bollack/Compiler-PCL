/* The following code was generated by JFlex 1.6.1 */

package lexer;
import static scanner.Token.*;
import scanner.Token;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/GItBitBUcket/Compiler-PCL/src/lexer/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\63\1\3\1\1\22\0\1\3\1\33\1\20"+
    "\1\23\1\33\1\33\1\33\1\21\1\4\1\6\1\5\1\17\1\24"+
    "\1\14\1\15\1\11\12\13\1\32\1\25\1\30\1\27\1\26\1\33"+
    "\1\0\1\34\1\37\1\47\1\52\1\40\1\54\1\41\1\51\1\42"+
    "\1\12\1\57\1\45\1\60\1\43\1\44\1\56\1\12\1\35\1\50"+
    "\1\46\1\55\1\61\1\53\1\62\1\36\1\12\1\31\1\22\1\31"+
    "\1\33\2\0\4\12\1\16\25\12\1\7\1\0\1\10\1\33\6\0"+
    "\1\63\33\0\1\33\35\0\1\33\u1f68\0\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\3\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\3\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\24\6\1\0\1\22"+
    "\1\0\1\2\1\23\1\1\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\0\1\31\1\0\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\11\6\1\41\1\42\2\6"+
    "\1\43\1\44\4\6\1\45\10\6\1\46\15\6\2\0"+
    "\1\1\1\24\1\0\1\47\1\32\1\50\1\51\1\6"+
    "\1\52\6\6\1\53\3\6\1\54\1\55\1\56\10\6"+
    "\1\57\2\6\1\60\6\6\1\61\4\6\1\62\1\63"+
    "\1\64\1\0\1\32\1\6\1\65\1\66\2\6\1\67"+
    "\2\6\1\70\1\71\3\6\1\72\1\73\1\74\1\75"+
    "\1\6\1\76\4\6\1\77\2\6\1\100\6\6\1\101"+
    "\2\6\1\102\2\6\1\103\1\6\1\104\3\6\1\105"+
    "\1\106\1\107\2\6\1\110\3\6\1\111\1\112\1\6"+
    "\1\113\1\6\1\114\1\6\1\115\2\6\1\116\2\6"+
    "\1\117\1\120\1\6\1\121\1\6\1\122\1\6\1\123"+
    "\1\124\1\6\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\64\0\u0104"+
    "\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\64\0\64\0\u030c\0\64\0\u0340\0\64\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\64\0\u07ec\0\u0820"+
    "\0\64\0\u0854\0\u0888\0\u08bc\0\64\0\64\0\64\0\64"+
    "\0\u0270\0\64\0\u08f0\0\u0924\0\u0958\0\64\0\64\0\64"+
    "\0\u098c\0\64\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u016c\0\u0bc8\0\u0bfc\0\u016c"+
    "\0\u016c\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u016c\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4"+
    "\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1214\0\64\0\u1248\0\64\0\64\0\u127c\0\u016c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u016c\0\u13e8\0\u141c"+
    "\0\u1450\0\u016c\0\u016c\0\u016c\0\u1484\0\u14b8\0\u14ec\0\u1520"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u016c\0\u1624\0\u1658\0\u016c"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8"+
    "\0\u182c\0\u1860\0\u1894\0\u016c\0\u016c\0\u016c\0\u18c8\0\64"+
    "\0\u18fc\0\u016c\0\u016c\0\u1930\0\u1964\0\u016c\0\u1998\0\u19cc"+
    "\0\u016c\0\u016c\0\u1a00\0\u1a34\0\u1a68\0\u016c\0\u016c\0\u016c"+
    "\0\u016c\0\u1a9c\0\u016c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u016c"+
    "\0\u1ba0\0\u1bd4\0\u016c\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u016c\0\u1d40\0\u1d74\0\u016c\0\u1da8\0\u1ddc\0\u016c"+
    "\0\u1e10\0\u016c\0\u1e44\0\u1e78\0\u1eac\0\u016c\0\u016c\0\u016c"+
    "\0\u1ee0\0\u1f14\0\u016c\0\u1f48\0\u1f7c\0\u1fb0\0\u016c\0\u016c"+
    "\0\u1fe4\0\u016c\0\u2018\0\u016c\0\u204c\0\u016c\0\u2080\0\u20b4"+
    "\0\u016c\0\u20e8\0\u211c\0\u016c\0\u016c\0\u2150\0\u016c\0\u2184"+
    "\0\u016c\0\u21b8\0\u016c\0\u016c\0\u21ec\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\12\1\16\1\17"+
    "\1\20\1\2\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\2\1\31\1\32\1\12\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\12\1\45\1\46\1\47\1\50\1\51\1\12\1\52"+
    "\1\53\1\54\67\0\1\4\66\0\1\55\105\0\1\56"+
    "\34\0\7\57\1\0\54\57\11\0\1\60\15\0\1\61"+
    "\46\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\27\12\14\0\1\13\1\0\1\63\1\64\21\0\1\64"+
    "\36\0\1\13\1\65\12\0\1\66\47\0\1\63\67\0"+
    "\1\67\7\0\1\70\34\0\20\71\1\72\1\71\1\0"+
    "\41\71\1\73\2\0\16\73\2\0\41\73\13\0\1\74"+
    "\76\0\1\75\1\76\62\0\1\77\1\100\1\101\62\0"+
    "\1\102\46\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\1\12\1\103\5\12\1\104\17\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\4\12\1\105"+
    "\22\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\2\12\1\106\1\12\1\107\3\12\1\110\16\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\7\12\1\111\1\12\1\112\15\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\10\12\1\113\16\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\7\12\1\114\10\12\1\115\6\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\6\12\1\116\1\12"+
    "\1\117\16\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\1\12\1\120\16\12\1\121\6\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\1\122"+
    "\7\12\1\123\16\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\1\12\1\124\1\125\5\12\1\126"+
    "\4\12\1\127\11\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\1\130\7\12\1\131\4\12\1\132"+
    "\11\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\4\12\1\133\5\12\1\134\2\12\1\135\11\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\6\12\1\136\1\12\1\137\16\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\1\12\1\140\4\12"+
    "\1\141\6\12\1\142\11\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\1\143\5\12\1\144\1\12"+
    "\1\145\10\12\1\146\5\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\7\12\1\147\17\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\1\150"+
    "\1\151\25\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\10\12\1\152\16\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\1\153\26\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\10\12"+
    "\1\154\16\12\1\0\5\155\1\156\56\155\10\57\1\4"+
    "\53\57\1\60\1\3\1\4\61\60\12\0\2\157\2\0"+
    "\1\157\1\0\3\62\10\0\1\62\27\157\14\0\1\63"+
    "\2\0\1\64\21\0\1\64\36\0\1\160\1\161\2\0"+
    "\1\161\65\0\1\162\55\0\1\163\77\0\1\164\63\0"+
    "\1\165\46\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\1\12\1\166\25\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\16\12\1\167\10\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\1\170"+
    "\12\12\1\171\6\12\1\172\4\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\12\12\1\173\14\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\5\12\1\174\21\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\10\12\1\175\16\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\16\12\1\176"+
    "\10\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\14\12\1\177\12\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\12\12\1\200\14\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\11\12"+
    "\1\201\1\202\14\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\11\12\1\203\15\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\12\12\1\204"+
    "\14\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\3\12\1\205\23\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\7\12\1\206\17\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\21\12"+
    "\1\207\5\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\22\12\1\210\4\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\4\12\1\211\22\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\14\12\1\212\12\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\7\12\1\213\17\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\1\214\26\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\12\12\1\215\14\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\1\12\1\216\25\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\10\12\1\217"+
    "\16\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\25\12\1\220\1\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\17\12\1\221\7\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\6\12"+
    "\1\222\20\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\12\12\1\223\14\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\6\12\1\224\20\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\11\12\1\225\15\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\11\12\1\226\15\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\1\12\1\227"+
    "\25\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\7\12\1\230\17\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\12\12\1\231\14\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\13\12"+
    "\1\232\13\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\10\12\1\233\16\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\16\12\1\234\10\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\1\12\1\235\25\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\1\12\1\236\25\12\1\0\5\155"+
    "\1\237\56\155\5\0\1\156\1\4\67\0\2\157\2\0"+
    "\1\157\15\0\27\157\14\0\1\160\63\0\1\240\62\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\1\241"+
    "\26\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\11\12\1\242\4\12\1\243\10\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\10\12\1\244"+
    "\16\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\4\12\1\245\22\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\4\12\1\246\22\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\6\12"+
    "\1\247\20\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\11\12\1\250\15\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\4\12\1\251\22\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\10\12\1\252\16\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\6\12\1\253\20\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\4\12\1\254"+
    "\22\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\5\12\1\255\21\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\4\12\1\256\22\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\4\12"+
    "\1\257\22\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\7\12\1\260\17\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\4\12\1\261\22\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\14\12\1\262\12\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\1\12\1\263\25\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\6\12\1\264"+
    "\20\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\1\12\1\265\25\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\7\12\1\266\17\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\12\12"+
    "\1\267\14\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\15\12\1\270\11\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\11\12\1\271\15\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\14\12\1\272\12\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\4\12\1\273\22\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\17\12\1\274"+
    "\7\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\13\12\1\275\13\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\6\12\1\276\20\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\23\12"+
    "\1\277\3\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\5\12\1\300\5\12\1\301\13\12\1\0"+
    "\5\155\1\237\1\4\55\155\12\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\2\12\1\302\24\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\1\12"+
    "\1\303\25\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\1\304\26\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\7\12\1\305\17\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\4\12"+
    "\1\306\22\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\7\12\1\307\17\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\11\12\1\310\15\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\6\12\1\311\20\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\12\12\1\312\14\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\7\12\1\313"+
    "\17\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\12\12\1\314\14\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\12\12\1\315\14\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\4\12"+
    "\1\316\22\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\4\12\1\317\22\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\4\12\1\320\22\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\1\321\26\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\12\12\1\322\14\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\11\12\1\323\15\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\4\12\1\324\22\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\1\12\1\325\25\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\4\12\1\326"+
    "\22\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\16\12\1\327\10\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\12\12\1\330\14\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\1\331"+
    "\26\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\4\12\1\332\22\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\7\12\1\333\17\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\5\12"+
    "\1\334\21\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\6\12\1\335\20\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\10\12\1\336\16\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\1\12\1\337\25\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\6\12\1\340\20\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\16\12\1\341"+
    "\10\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\1\342\26\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\16\12\1\343\10\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\7\12\1\344"+
    "\17\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\12\12\1\345\14\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\7\12\1\346\17\12\13\0"+
    "\2\12\2\0\1\12\1\0\3\62\10\0\1\62\16\12"+
    "\1\347\10\12\13\0\2\12\2\0\1\12\1\0\3\62"+
    "\10\0\1\62\10\12\1\350\16\12\13\0\2\12\2\0"+
    "\1\12\1\0\3\62\10\0\1\62\24\12\1\351\2\12"+
    "\13\0\2\12\2\0\1\12\1\0\3\62\10\0\1\62"+
    "\21\12\1\352\5\12\13\0\2\12\2\0\1\12\1\0"+
    "\3\62\10\0\1\62\12\12\1\353\14\12\13\0\2\12"+
    "\2\0\1\12\1\0\3\62\10\0\1\62\7\12\1\354"+
    "\17\12\13\0\2\12\2\0\1\12\1\0\3\62\10\0"+
    "\1\62\1\12\1\355\25\12\13\0\2\12\2\0\1\12"+
    "\1\0\3\62\10\0\1\62\4\12\1\356\22\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\12\1\2\11"+
    "\1\1\1\11\1\1\1\11\25\1\1\0\1\11\1\0"+
    "\1\1\1\11\2\1\1\0\4\11\1\0\1\11\1\0"+
    "\2\1\3\11\1\1\1\11\52\1\2\0\2\1\1\0"+
    "\1\11\1\1\2\11\51\1\1\0\1\11\116\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public Integer line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); line=yyline;return ERROR;
            }
          case 86: break;
          case 2: 
            { /*Ignore*/
            }
          case 87: break;
          case 3: 
            { lexeme=yytext(); line=yyline; return PARENT;
            }
          case 88: break;
          case 4: 
            { lexeme=yytext(); line=yyline; return TIMES;
            }
          case 89: break;
          case 5: 
            { lexeme=yytext(); line=yyline; return DIV;
            }
          case 90: break;
          case 6: 
            { lexeme=yytext(); line=yyline; if(yylength()<128){ return ID;}else{ return ERROR_ID;}
            }
          case 91: break;
          case 7: 
            { lexeme=yytext(); line=yyline; return INT_LITERAL;
            }
          case 92: break;
          case 8: 
            { lexeme=yytext(); line=yyline; return MINUS;
            }
          case 93: break;
          case 9: 
            { lexeme=yytext(); line=yyline; return PERIOD;
            }
          case 94: break;
          case 10: 
            { lexeme=yytext(); line=yyline; return PLUS;
            }
          case 95: break;
          case 11: 
            { lexeme=yytext(); line=yyline; return COMMA;
            }
          case 96: break;
          case 12: 
            { lexeme=yytext(); line=yyline; return SEMICOLON;
            }
          case 97: break;
          case 13: 
            { lexeme=yytext(); line=yyline; return GREATER_THAN;
            }
          case 98: break;
          case 14: 
            { lexeme=yytext(); line=yyline; return ASSIGN;
            }
          case 99: break;
          case 15: 
            { lexeme=yytext(); line=yyline; return LESS_THAN;
            }
          case 100: break;
          case 16: 
            { lexeme=yytext(); line=yyline; return COL;
            }
          case 101: break;
          case 17: 
            { lexeme=yytext(); line=yyline; return COLON;
            }
          case 102: break;
          case 18: 
            { lexeme=yytext(); line=yyline; return TIMES_ASSIGN;
            }
          case 103: break;
          case 19: 
            { lexeme=yytext(); line=yyline; return DIV_ASSIGN;
            }
          case 104: break;
          case 20: 
            { lexeme=yytext(); line=yyline; return FLOAT_LITERAL;
            }
          case 105: break;
          case 21: 
            { lexeme=yytext(); line=yyline; return MINUS_MINUS;
            }
          case 106: break;
          case 22: 
            { lexeme=yytext(); line=yyline; return MINUS_ASSIGN;
            }
          case 107: break;
          case 23: 
            { lexeme=yytext(); line=yyline; return PLUS_PLUS;
            }
          case 108: break;
          case 24: 
            { lexeme=yytext(); line=yyline; return SUM_ASSIGN;
            }
          case 109: break;
          case 25: 
            { lexeme=yytext(); line=yyline; return STRING_LITERAL;
            }
          case 110: break;
          case 26: 
            { lexeme=yytext(); line=yyline; return CHAR_MADE_INT_LITERAL;
            }
          case 111: break;
          case 27: 
            { lexeme=yytext(); line=yyline; return LEFT;
            }
          case 112: break;
          case 28: 
            { lexeme=yytext(); line=yyline; return GREATER_OR_EQUAL_THAN;
            }
          case 113: break;
          case 29: 
            { lexeme=yytext(); line=yyline; return LESS_GREATER;
            }
          case 114: break;
          case 30: 
            { lexeme=yytext(); line=yyline; return LESS_OR_EQUAL_THAN;
            }
          case 115: break;
          case 31: 
            { lexeme=yytext(); line=yyline; return RIGHT;
            }
          case 116: break;
          case 32: 
            { lexeme=yytext(); line=yyline; return COLON_ASSIGN;
            }
          case 117: break;
          case 33: 
            { lexeme=yytext(); line=yyline; return IN;
            }
          case 118: break;
          case 34: 
            { lexeme=yytext(); line=yyline; return IF;
            }
          case 119: break;
          case 35: 
            { lexeme=yytext(); line=yyline; return OR;
            }
          case 120: break;
          case 36: 
            { lexeme=yytext(); line=yyline; return OF;
            }
          case 121: break;
          case 37: 
            { lexeme=yytext(); line=yyline; return TO;
            }
          case 122: break;
          case 38: 
            { lexeme=yytext(); line=yyline; return DO;
            }
          case 123: break;
          case 39: 
            { lexeme=yytext(); line=yyline; return CHAR_LITERAL;
            }
          case 124: break;
          case 40: 
            { lexeme=yytext(); line=yyline; return LEFT_ASSIGN;
            }
          case 125: break;
          case 41: 
            { lexeme=yytext(); line=yyline; return RIGHT_ASSIGN;
            }
          case 126: break;
          case 42: 
            { lexeme=yytext(); line=yyline; return AND;
            }
          case 127: break;
          case 43: 
            { lexeme=yytext(); line=yyline; return END;
            }
          case 128: break;
          case 44: 
            { lexeme=yytext(); line=yyline; return INT;
            }
          case 129: break;
          case 45: 
            { lexeme=yytext(); line=yyline; return NIL;
            }
          case 130: break;
          case 46: 
            { lexeme=yytext(); line=yyline; return NOT;
            }
          case 131: break;
          case 47: 
            { lexeme=yytext(); line=yyline; return SET;
            }
          case 132: break;
          case 48: 
            { lexeme=yytext(); line=yyline; return DIV_WORD;
            }
          case 133: break;
          case 49: 
            { lexeme=yytext(); line=yyline; return FOR;
            }
          case 134: break;
          case 50: 
            { lexeme=yytext(); line=yyline; return MOD;
            }
          case 135: break;
          case 51: 
            { lexeme=yytext(); line=yyline; return VAR;
            }
          case 136: break;
          case 52: 
            { lexeme=yytext(); line=yyline; return XOR;
            }
          case 137: break;
          case 53: 
            { lexeme=yytext(); line=yyline; return REAL;
            }
          case 138: break;
          case 54: 
            { lexeme=yytext(); line=yyline; return READ;
            }
          case 139: break;
          case 55: 
            { lexeme=yytext(); line=yyline; return BYTE;
            }
          case 140: break;
          case 56: 
            { lexeme=yytext(); line=yyline; return ELSE;
            }
          case 141: break;
          case 57: 
            { lexeme=yytext(); line=yyline; return GOTO;
            }
          case 142: break;
          case 58: 
            { lexeme=yytext(); line=yyline; return TRUE;
            }
          case 143: break;
          case 59: 
            { lexeme=yytext(); line=yyline; return TYPE;
            }
          case 144: break;
          case 60: 
            { lexeme=yytext(); line=yyline; return THEN;
            }
          case 145: break;
          case 61: 
            { lexeme=yytext(); line=yyline; return CASE;
            }
          case 146: break;
          case 62: 
            { lexeme=yytext(); line=yyline; return CHAR;
            }
          case 147: break;
          case 63: 
            { lexeme=yytext(); line=yyline; return WITH;
            }
          case 148: break;
          case 64: 
            { lexeme=yytext(); line=yyline; return FILE;
            }
          case 149: break;
          case 65: 
            { lexeme=yytext(); line=yyline; return ARRAY;
            }
          case 150: break;
          case 66: 
            { lexeme=yytext(); line=yyline; return BEGIN;
            }
          case 151: break;
          case 67: 
            { lexeme=yytext(); line=yyline; return LABEL;
            }
          case 152: break;
          case 68: 
            { lexeme=yytext(); line=yyline; return CONST;
            }
          case 153: break;
          case 69: 
            { lexeme=yytext(); line=yyline; return WRITE;
            }
          case 154: break;
          case 70: 
            { lexeme=yytext(); line=yyline; return WHILE;
            }
          case 155: break;
          case 71: 
            { lexeme=yytext(); line=yyline; return FALSE;
            }
          case 156: break;
          case 72: 
            { lexeme=yytext(); line=yyline; return UNTIL;
            }
          case 157: break;
          case 73: 
            { lexeme=yytext(); line=yyline; return RECORD;
            }
          case 158: break;
          case 74: 
            { lexeme=yytext(); line=yyline; return REPEAT;
            }
          case 159: break;
          case 75: 
            { lexeme=yytext(); line=yyline; return INLINE;
            }
          case 160: break;
          case 76: 
            { lexeme=yytext(); line=yyline; return STRING;
            }
          case 161: break;
          case 77: 
            { lexeme=yytext(); line=yyline; return DOWNTO;
            }
          case 162: break;
          case 78: 
            { lexeme=yytext(); line=yyline; return PACKED;
            }
          case 163: break;
          case 79: 
            { lexeme=yytext(); line=yyline; return BOOLEAN;
            }
          case 164: break;
          case 80: 
            { lexeme=yytext(); line=yyline; return LONGINT;
            }
          case 165: break;
          case 81: 
            { lexeme=yytext(); line=yyline; return FORWARD;
            }
          case 166: break;
          case 82: 
            { lexeme=yytext(); line=yyline; return PROGRAM;
            }
          case 167: break;
          case 83: 
            { lexeme=yytext(); line=yyline; return SHORTINT;
            }
          case 168: break;
          case 84: 
            { lexeme=yytext(); line=yyline; return FUNCTION;
            }
          case 169: break;
          case 85: 
            { lexeme=yytext(); line=yyline; return PROCEDURE;
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
