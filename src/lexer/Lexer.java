/* The following code was generated by JFlex 1.6.1 */

package lexer;
import static scanner.Token.*;
import scanner.Token;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/GItBitBUcket/Compiler-PCL/src/lexer/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\64\1\3\1\1\22\0\1\3\1\0\1\20"+
    "\1\23\3\0\1\21\1\4\1\6\1\5\1\17\1\24\1\14\1\15"+
    "\1\11\12\13\1\32\1\25\1\31\1\30\1\27\2\0\1\33\1\36"+
    "\1\46\1\52\1\16\1\54\1\37\1\51\1\41\1\12\1\60\1\44"+
    "\1\61\1\42\1\43\1\56\1\12\1\34\1\50\1\45\1\55\1\62"+
    "\1\53\1\63\1\35\1\12\1\26\1\22\1\26\3\0\1\33\1\36"+
    "\1\46\1\52\1\16\1\54\1\37\1\51\1\41\1\12\1\60\1\44"+
    "\1\61\1\42\1\43\1\56\1\12\1\34\1\50\1\45\1\55\1\62"+
    "\1\53\1\63\1\35\1\12\1\7\1\0\1\10\7\0\1\64\252\0"+
    "\2\40\115\0\1\47\u1ea8\0\1\64\1\64\u0100\0\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\3\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\6\1\12\3\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\4\6\1\1"+
    "\6\6\1\1\11\6\1\0\1\22\1\0\1\2\1\23"+
    "\1\24\1\0\1\25\1\26\2\6\1\27\1\30\1\0"+
    "\1\31\1\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\7\6\1\41\1\42\1\41\1\42\1\0\2\6"+
    "\1\43\1\44\4\6\1\45\4\6\3\0\3\6\1\0"+
    "\1\6\1\46\1\6\1\0\3\6\1\0\11\6\2\0"+
    "\1\24\1\0\1\47\1\0\1\6\1\50\1\32\1\51"+
    "\1\52\1\6\1\53\7\6\1\0\1\54\1\6\1\54"+
    "\2\55\1\56\5\6\1\0\3\6\1\57\2\0\1\57"+
    "\2\6\2\60\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\61\4\6\1\62\1\63\1\64"+
    "\1\0\2\65\1\32\1\6\1\66\1\67\2\6\1\0"+
    "\1\6\1\70\1\6\1\71\1\0\3\6\1\72\1\73"+
    "\1\74\2\75\1\0\1\6\1\76\2\0\3\6\1\0"+
    "\1\6\2\77\1\0\1\6\1\0\1\6\2\100\2\6"+
    "\1\0\1\6\1\0\3\6\1\101\2\6\2\102\1\6"+
    "\1\0\1\6\1\103\1\0\1\6\2\104\2\0\3\6"+
    "\2\105\2\106\2\107\2\6\2\110\1\0\3\6\1\111"+
    "\1\112\1\6\2\113\1\0\1\6\1\114\1\0\1\114"+
    "\1\6\1\115\1\6\1\0\1\6\2\116\2\6\1\117"+
    "\2\120\1\0\1\6\1\121\1\0\1\6\1\122\1\6"+
    "\2\123\2\124\1\6\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\324\0\65\0\u0109"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\65\0\65\0\65\0\u0350\0\65\0\u0385"+
    "\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\65"+
    "\0\u087d\0\u08b2\0\65\0\u08e7\0\u091c\0\65\0\65\0\u0951"+
    "\0\u0986\0\65\0\65\0\u02b1\0\65\0\u09bb\0\u09f0\0\u0a25"+
    "\0\65\0\65\0\65\0\u0a5a\0\65\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\65\0\u0c37\0\u0173"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0173\0\u0173\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0173\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
    "\0\u1415\0\u1415\0\u0173\0\u144a\0\u147f\0\65\0\u14b4\0\65"+
    "\0\65\0\u14e9\0\u0173\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\65\0\u16c6\0\u0173\0\65\0\u0173"+
    "\0\u0173\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839"+
    "\0\u186e\0\u18a3\0\65\0\u18d8\0\u190d\0\u0173\0\u1942\0\u1977"+
    "\0\65\0\u0173\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d"+
    "\0\u1c92\0\u0173\0\u0173\0\u0173\0\u1cc7\0\65\0\u0173\0\65"+
    "\0\u1cfc\0\u0173\0\u0173\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u0173"+
    "\0\u1e05\0\u0173\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u0173\0\u0173"+
    "\0\u0173\0\65\0\u0173\0\u1f0e\0\u1f43\0\u0173\0\u1f78\0\u1fad"+
    "\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\65\0\u0173\0\u20eb"+
    "\0\u2120\0\u2155\0\u218a\0\65\0\u0173\0\u21bf\0\u21f4\0\u2229"+
    "\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u0173\0\u2367\0\u239c"+
    "\0\65\0\u0173\0\u23d1\0\u2406\0\u243b\0\u0173\0\u2470\0\u24a5"+
    "\0\65\0\u0173\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\65"+
    "\0\u0173\0\65\0\u0173\0\65\0\u0173\0\u25e3\0\u2618\0\65"+
    "\0\u0173\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u0173\0\u0173\0\u2721"+
    "\0\65\0\u0173\0\u2756\0\u278b\0\65\0\u27c0\0\u0173\0\u27f5"+
    "\0\u0173\0\u282a\0\u285f\0\u2894\0\65\0\u0173\0\u28c9\0\u28fe"+
    "\0\u0173\0\65\0\u0173\0\u2933\0\u2968\0\u0173\0\u299d\0\u29d2"+
    "\0\u0173\0\u2a07\0\65\0\u0173\0\65\0\u0173\0\u2a3c\0\u0173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\2\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\12\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\12\1\47\1\50\1\51\1\52\1\53\1\2\1\12"+
    "\1\54\1\55\1\56\70\0\1\4\67\0\1\57\107\0"+
    "\1\60\34\0\7\61\1\0\55\61\11\0\1\62\16\0"+
    "\1\63\46\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\6\12\1\0\7\12\1\0\4\12\14\0\1\13\1\0"+
    "\1\64\1\65\61\0\1\13\1\66\13\0\1\67\47\0"+
    "\1\64\63\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\70\1\12\1\71\2\12\1\0\7\12\1\0"+
    "\4\12\20\0\1\72\10\0\1\73\34\0\20\74\1\75"+
    "\1\74\1\0\42\74\1\76\2\0\16\76\2\0\42\76"+
    "\13\0\1\77\100\0\1\100\1\101\63\0\1\102\1\103"+
    "\1\104\63\0\1\105\46\0\2\12\2\0\1\12\14\0"+
    "\1\12\1\106\3\12\1\0\1\12\1\107\4\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\110\14\0"+
    "\5\12\1\0\6\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\111\14\0\2\12\1\112\2\12\1\0"+
    "\2\12\1\113\3\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\2\12\1\114"+
    "\3\12\1\0\7\12\1\0\4\12\43\0\1\115\11\0"+
    "\1\116\22\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\117\4\12\1\0\4\12\1\120\2\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\121"+
    "\1\122\1\12\1\123\3\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\1\12\1\124\3\12"+
    "\1\0\6\12\1\0\4\12\1\125\2\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\1\126\4\12\1\0"+
    "\2\12\1\127\3\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\1\12\1\130\1\131\2\12"+
    "\1\0\2\12\1\132\3\12\1\0\1\12\1\133\5\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\1\134"+
    "\4\12\1\0\2\12\1\135\3\12\1\0\1\12\1\136"+
    "\5\12\1\0\4\12\17\0\1\137\26\0\1\140\3\0"+
    "\1\141\25\0\2\12\2\0\1\142\14\0\5\12\1\0"+
    "\4\12\1\143\1\12\1\0\1\12\1\144\5\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\145"+
    "\1\146\1\12\1\147\3\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\1\12\1\150\3\12"+
    "\1\151\1\152\5\12\1\0\1\12\1\153\5\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\1\154\4\12"+
    "\1\155\1\156\1\12\1\157\3\12\1\0\5\12\1\160"+
    "\1\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\1\12\1\161\4\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\1\162\1\163"+
    "\3\12\1\0\6\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\2\12\1\164"+
    "\3\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\1\165\4\12\1\0\6\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\2\12\1\166\3\12\1\0\7\12\1\0\4\12"+
    "\1\0\5\167\1\170\57\167\10\61\1\4\54\61\1\62"+
    "\1\3\1\4\62\62\13\0\1\64\2\0\1\65\61\0"+
    "\1\171\1\172\2\0\1\172\57\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\6\12\1\0\2\12\1\173\4\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\6\12\1\174\1\175\6\12\1\0\4\12\22\0"+
    "\1\176\56\0\1\177\101\0\1\200\64\0\1\201\46\0"+
    "\2\12\2\0\1\12\14\0\1\12\1\202\3\12\1\0"+
    "\6\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\6\12\1\0\2\12\1\203"+
    "\4\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\1\204\4\12\1\0\5\12\1\205\1\0\6\12\1\206"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\4\12"+
    "\1\207\1\0\6\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\4\12\1\210"+
    "\1\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\2\12\1\211\3\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\4\12\1\212\1\12\1\0\7\12\1\0"+
    "\4\12\45\0\1\213\1\214\31\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\3\12\1\215\1\216\1\12\1\0"+
    "\7\12\1\0\4\12\45\0\1\217\32\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\3\12\1\220\2\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\4\12\1\221\1\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\3\12\1\222"+
    "\1\12\1\0\6\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\1\12\1\223"+
    "\4\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\6\12\1\0\5\12\1\224"+
    "\1\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\6\12\1\0\6\12\1\225\1\0\4\12"+
    "\13\0\2\12\2\0\1\226\14\0\5\12\1\0\6\12"+
    "\1\0\7\12\1\0\4\12\13\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\6\12\1\227\1\230\6\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\231\4\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\1\232\4\12\1\0\6\12"+
    "\1\0\7\12\1\0\4\12\46\0\1\233\53\0\1\234"+
    "\73\0\1\235\33\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\4\12\1\236\1\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\1\12\1\237\3\12"+
    "\1\0\6\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\5\12\1\0\2\12\1\240\3\12"+
    "\1\0\7\12\1\0\4\12\63\0\1\241\14\0\2\12"+
    "\2\0\1\12\14\0\5\12\1\0\6\12\1\0\7\12"+
    "\1\0\2\12\1\242\1\12\13\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\6\12\1\0\3\12\1\243\3\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\244\1\245\5\12\1\0\7\12\1\0\4\12\46\0"+
    "\1\246\31\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\4\12\1\247\1\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\250\1\251\5\12"+
    "\1\0\7\12\1\0\4\12\13\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\3\12\1\252\2\12\1\0\7\12"+
    "\1\0\4\12\45\0\1\253\32\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\3\12\1\254\2\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\1\12"+
    "\1\255\3\12\1\0\6\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\5\12\1\0\1\12"+
    "\1\256\4\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\5\12\1\0\4\12\1\257\1\12"+
    "\1\0\7\12\1\0\4\12\13\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\5\12\1\260\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\2\12\1\261\3\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\6\12\1\0"+
    "\2\12\1\262\4\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\1\12\1\263\3\12\1\0\6\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\1\12\1\264\3\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\1\0\5\167\1\265\57\167\5\0\1\170\1\4"+
    "\71\0\1\171\67\0\1\266\60\0\2\12\2\0\1\267"+
    "\14\0\5\12\1\0\6\12\1\0\7\12\1\0\4\12"+
    "\14\0\1\270\63\0\2\12\2\0\1\12\14\0\1\271"+
    "\4\12\1\0\6\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\3\12\1\272"+
    "\2\12\1\0\2\12\1\273\4\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\2\12\1\274"+
    "\3\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\275\14\0\5\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\276"+
    "\1\277\5\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\300\14\0\5\12\1\0\6\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\3\12\1\301\2\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\5\12\1\0\2\12"+
    "\1\302\3\12\1\0\7\12\1\0\4\12\41\0\2\303"+
    "\35\0\2\12\2\0\1\12\14\0\5\12\1\303\1\304"+
    "\5\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\305\14\0\5\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\4\12\1\306"+
    "\1\0\6\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\307\14\0\5\12\1\0\6\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\310\14\0\5\12"+
    "\1\0\6\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\5\12\1\0\1\12\1\311\4\12"+
    "\1\0\7\12\1\0\4\12\17\0\1\312\60\0\2\12"+
    "\2\0\1\313\14\0\5\12\1\0\6\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\6\12\1\314\1\315\6\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\1\12\1\316\3\12\1\0"+
    "\6\12\1\0\7\12\1\0\4\12\41\0\2\317\57\0"+
    "\1\320\42\0\2\12\2\0\1\12\14\0\5\12\1\317"+
    "\1\321\5\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\1\12\1\322\3\12\1\0\6\12"+
    "\1\0\7\12\1\0\4\12\13\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\1\12\1\323\4\12\1\0\7\12"+
    "\1\0\4\12\46\0\1\324\31\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\4\12\1\325\1\12\1\0\7\12"+
    "\1\0\4\12\52\0\1\326\25\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\6\12\1\0\1\12\1\327\5\12"+
    "\1\0\4\12\45\0\1\330\32\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\3\12\1\331\2\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\6\12\1\332\1\333\6\12\1\0\4\12\17\0"+
    "\1\334\60\0\2\12\2\0\1\335\14\0\5\12\1\0"+
    "\6\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\6\12\1\0\3\12\1\336"+
    "\3\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\5\12\1\337\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\5\12\1\340\1\341"+
    "\5\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\6\12\1\0\7\12\1\342"+
    "\1\343\3\12\13\0\2\12\2\0\1\12\14\0\4\12"+
    "\1\344\1\0\5\12\1\345\1\0\7\12\1\0\4\12"+
    "\1\0\5\167\1\265\1\4\56\167\12\0\2\12\2\0"+
    "\1\12\14\0\2\12\1\346\2\12\1\0\6\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\1\12\1\347\3\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\1\350\4\12"+
    "\1\0\6\12\1\0\7\12\1\0\4\12\43\0\1\351"+
    "\34\0\2\12\2\0\1\12\14\0\5\12\1\0\1\12"+
    "\1\352\4\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\353\14\0\5\12\1\0\6\12\1\0\7\12"+
    "\1\0\4\12\43\0\1\354\34\0\2\12\2\0\1\12"+
    "\14\0\5\12\1\0\1\12\1\355\4\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\3\12\1\356\2\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\5\12\1\357\1\360"+
    "\5\12\1\0\7\12\1\0\4\12\46\0\1\361\31\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\4\12\1\362"+
    "\1\12\1\0\7\12\1\0\4\12\43\0\1\363\67\0"+
    "\1\364\31\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\365\4\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\4\12\1\366"+
    "\1\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\4\12\1\367\1\12\1\0"+
    "\7\12\1\0\4\12\17\0\1\370\60\0\2\12\2\0"+
    "\1\371\14\0\5\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\17\0\1\372\60\0\2\12\2\0\1\373\14\0"+
    "\5\12\1\0\6\12\1\0\7\12\1\0\4\12\17\0"+
    "\1\374\60\0\2\12\2\0\1\375\14\0\5\12\1\0"+
    "\6\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\1\376\4\12\1\0\6\12\1\0\7\12"+
    "\1\0\4\12\13\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\4\12\1\377\1\12\1\0\7\12\1\0\4\12"+
    "\45\0\1\u0100\32\0\2\12\2\0\1\12\14\0\5\12"+
    "\1\0\3\12\1\u0101\2\12\1\0\7\12\1\0\4\12"+
    "\17\0\1\u0102\60\0\2\12\2\0\1\u0103\14\0\5\12"+
    "\1\0\6\12\1\0\7\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\1\12\1\u0104\3\12\1\0\6\12"+
    "\1\0\7\12\1\0\4\12\13\0\2\12\2\0\1\u0105"+
    "\14\0\5\12\1\0\6\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\5\12\1\0\6\12"+
    "\1\0\2\12\1\u0106\4\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\5\12\1\0\4\12\1\u0107\1\12"+
    "\1\0\7\12\1\0\4\12\13\0\2\12\2\0\1\12"+
    "\14\0\1\u0108\4\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\17\0\1\u0109\60\0\2\12\2\0\1\u010a\14\0"+
    "\5\12\1\0\6\12\1\0\7\12\1\0\4\12\43\0"+
    "\1\u010b\34\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\u010c\4\12\1\0\7\12\1\0\4\12\40\0"+
    "\1\u010d\65\0\2\u010e\35\0\2\12\2\0\1\12\14\0"+
    "\4\12\1\u010f\1\0\6\12\1\0\7\12\1\0\4\12"+
    "\13\0\2\12\2\0\1\12\14\0\5\12\1\u010e\1\u0110"+
    "\5\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\2\12\1\u0111\3\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\1\12\1\u0112\3\12\1\0\6\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\u0113"+
    "\1\u0114\5\12\1\0\7\12\1\0\4\12\53\0\1\u0115"+
    "\24\0\2\12\2\0\1\12\14\0\5\12\1\0\6\12"+
    "\1\0\2\12\1\u0116\4\12\1\0\4\12\13\0\2\12"+
    "\2\0\1\12\14\0\1\u0117\4\12\1\0\6\12\1\0"+
    "\7\12\1\0\4\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\6\12\1\0\2\12\1\u0118\4\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\u0119\4\12\1\0\7\12\1\0\4\12\46\0"+
    "\1\u011a\31\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\4\12\1\u011b\1\12\1\0\7\12\1\0\4\12\43\0"+
    "\1\u011c\34\0\2\12\2\0\1\12\14\0\5\12\1\0"+
    "\1\12\1\u011d\4\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\6\12\1\0"+
    "\2\12\1\u011e\4\12\1\0\4\12\44\0\1\u011f\33\0"+
    "\2\12\2\0\1\12\14\0\5\12\1\0\2\12\1\u0120"+
    "\3\12\1\0\7\12\1\0\4\12\13\0\2\12\2\0"+
    "\1\12\14\0\5\12\1\0\6\12\1\0\7\12\1\0"+
    "\1\12\1\u0121\2\12\13\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\6\12\1\0\5\12\1\u0122\1\12\1\0"+
    "\4\12\46\0\1\u0123\31\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\4\12\1\u0124\1\12\1\0\7\12\1\0"+
    "\4\12\43\0\1\u0125\34\0\2\12\2\0\1\12\14\0"+
    "\5\12\1\0\1\12\1\u0126\4\12\1\0\7\12\1\0"+
    "\4\12\13\0\2\12\2\0\1\12\14\0\1\12\1\u0127"+
    "\3\12\1\0\6\12\1\0\7\12\1\0\4\12\13\0"+
    "\2\12\2\0\1\u0128\14\0\5\12\1\0\6\12\1\0"+
    "\7\12\1\0\4\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10865];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\13\1\3\11"+
    "\1\1\1\11\27\1\1\0\1\11\1\0\1\1\1\11"+
    "\1\1\1\0\2\11\2\1\2\11\1\0\1\11\1\0"+
    "\2\1\3\11\1\1\1\11\10\1\1\11\2\1\1\0"+
    "\15\1\3\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\11\1\2\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\2\11\11\1\1\0\1\11\2\1\1\11\7\1"+
    "\1\0\3\1\1\11\2\0\3\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\11\1\1\0"+
    "\1\11\1\1\1\11\5\1\1\0\4\1\1\0\6\1"+
    "\1\11\1\1\1\0\2\1\2\0\3\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\3\1"+
    "\1\0\1\1\1\0\6\1\1\11\2\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\2\0\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\1\1\1\0\6\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\0\4\1\1\0"+
    "\1\1\1\11\4\1\1\11\1\1\1\0\2\1\1\0"+
    "\3\1\1\11\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public Integer line;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); line=yyline;return ERROR;
            }
          case 86: break;
          case 2: 
            { /*Ignore*/
            }
          case 87: break;
          case 3: 
            { lexeme=yytext(); line=yyline; return PARENT;
            }
          case 88: break;
          case 4: 
            { lexeme=yytext(); line=yyline; return TIMES;
            }
          case 89: break;
          case 5: 
            { lexeme=yytext(); line=yyline; return DIV;
            }
          case 90: break;
          case 6: 
            { lexeme=yytext(); line=yyline; if(yylength()<128){ return ID;}else{ return ERROR_ID;}
            }
          case 91: break;
          case 7: 
            { lexeme=yytext(); line=yyline; return INT_LITERAL;
            }
          case 92: break;
          case 8: 
            { lexeme=yytext(); line=yyline; return MINUS;
            }
          case 93: break;
          case 9: 
            { lexeme=yytext(); line=yyline; return PERIOD;
            }
          case 94: break;
          case 10: 
            { lexeme=yytext(); line=yyline; return PLUS;
            }
          case 95: break;
          case 11: 
            { lexeme=yytext(); line=yyline; return COMMA;
            }
          case 96: break;
          case 12: 
            { lexeme=yytext(); line=yyline; return SEMICOLON;
            }
          case 97: break;
          case 13: 
            { lexeme=yytext(); line=yyline; return COL;
            }
          case 98: break;
          case 14: 
            { lexeme=yytext(); line=yyline; return GREATER_THAN;
            }
          case 99: break;
          case 15: 
            { lexeme=yytext(); line=yyline; return ASSIGN;
            }
          case 100: break;
          case 16: 
            { lexeme=yytext(); line=yyline; return LESS_THAN;
            }
          case 101: break;
          case 17: 
            { lexeme=yytext(); line=yyline; return COLON;
            }
          case 102: break;
          case 18: 
            { lexeme=yytext(); line=yyline; return TIMES_ASSIGN;
            }
          case 103: break;
          case 19: 
            { lexeme=yytext(); line=yyline; return DIV_ASSIGN;
            }
          case 104: break;
          case 20: 
            { lexeme=yytext(); line=yyline; return FLOAT_LITERAL;
            }
          case 105: break;
          case 21: 
            { lexeme=yytext(); line=yyline; return MINUS_MINUS;
            }
          case 106: break;
          case 22: 
            { lexeme=yytext(); line=yyline; return MINUS_ASSIGN;
            }
          case 107: break;
          case 23: 
            { lexeme=yytext(); line=yyline; return PLUS_PLUS;
            }
          case 108: break;
          case 24: 
            { lexeme=yytext(); line=yyline; return SUM_ASSIGN;
            }
          case 109: break;
          case 25: 
            { lexeme=yytext(); line=yyline; return STRING_LITERAL;
            }
          case 110: break;
          case 26: 
            { lexeme=yytext(); line=yyline; return CHAR_MADE_INT_LITERAL;
            }
          case 111: break;
          case 27: 
            { lexeme=yytext(); line=yyline; return LEFT;
            }
          case 112: break;
          case 28: 
            { lexeme=yytext(); line=yyline; return GREATER_OR_EQUAL_THAN;
            }
          case 113: break;
          case 29: 
            { lexeme=yytext(); line=yyline; return LESS_GREATER;
            }
          case 114: break;
          case 30: 
            { lexeme=yytext(); line=yyline; return LESS_OR_EQUAL_THAN;
            }
          case 115: break;
          case 31: 
            { lexeme=yytext(); line=yyline; return RIGHT;
            }
          case 116: break;
          case 32: 
            { lexeme=yytext(); line=yyline; return COLON_ASSIGN;
            }
          case 117: break;
          case 33: 
            { lexeme=yytext(); line=yyline; return IN;
            }
          case 118: break;
          case 34: 
            { lexeme=yytext(); line=yyline; return IF;
            }
          case 119: break;
          case 35: 
            { lexeme=yytext(); line=yyline; return OR;
            }
          case 120: break;
          case 36: 
            { lexeme=yytext(); line=yyline; return OF;
            }
          case 121: break;
          case 37: 
            { lexeme=yytext(); line=yyline; return TO;
            }
          case 122: break;
          case 38: 
            { lexeme=yytext(); line=yyline; return DO;
            }
          case 123: break;
          case 39: 
            { lexeme=yytext(); line=yyline; return END;
            }
          case 124: break;
          case 40: 
            { lexeme=yytext(); line=yyline; return CHAR_LITERAL;
            }
          case 125: break;
          case 41: 
            { lexeme=yytext(); line=yyline; return LEFT_ASSIGN;
            }
          case 126: break;
          case 42: 
            { lexeme=yytext(); line=yyline; return RIGHT_ASSIGN;
            }
          case 127: break;
          case 43: 
            { lexeme=yytext(); line=yyline; return AND;
            }
          case 128: break;
          case 44: 
            { lexeme=yytext(); line=yyline; return INT;
            }
          case 129: break;
          case 45: 
            { lexeme=yytext(); line=yyline; return NIL;
            }
          case 130: break;
          case 46: 
            { lexeme=yytext(); line=yyline; return NOT;
            }
          case 131: break;
          case 47: 
            { lexeme=yytext(); line=yyline; return SET;
            }
          case 132: break;
          case 48: 
            { lexeme=yytext(); line=yyline; return DIV_WORD;
            }
          case 133: break;
          case 49: 
            { lexeme=yytext(); line=yyline; return FOR;
            }
          case 134: break;
          case 50: 
            { lexeme=yytext(); line=yyline; return MOD;
            }
          case 135: break;
          case 51: 
            { lexeme=yytext(); line=yyline; return VAR;
            }
          case 136: break;
          case 52: 
            { lexeme=yytext(); line=yyline; return XOR;
            }
          case 137: break;
          case 53: 
            { lexeme=yytext(); line=yyline; return ELSE;
            }
          case 138: break;
          case 54: 
            { lexeme=yytext(); line=yyline; return REAL;
            }
          case 139: break;
          case 55: 
            { lexeme=yytext(); line=yyline; return READ;
            }
          case 140: break;
          case 56: 
            { lexeme=yytext(); line=yyline; return BYTE;
            }
          case 141: break;
          case 57: 
            { lexeme=yytext(); line=yyline; return GOTO;
            }
          case 142: break;
          case 58: 
            { lexeme=yytext(); line=yyline; return TRUE;
            }
          case 143: break;
          case 59: 
            { lexeme=yytext(); line=yyline; return TYPE;
            }
          case 144: break;
          case 60: 
            { lexeme=yytext(); line=yyline; return THEN;
            }
          case 145: break;
          case 61: 
            { lexeme=yytext(); line=yyline; return CASE;
            }
          case 146: break;
          case 62: 
            { lexeme=yytext(); line=yyline; return CHAR;
            }
          case 147: break;
          case 63: 
            { lexeme=yytext(); line=yyline; return WITH;
            }
          case 148: break;
          case 64: 
            { lexeme=yytext(); line=yyline; return FILE;
            }
          case 149: break;
          case 65: 
            { lexeme=yytext(); line=yyline; return ARRAY;
            }
          case 150: break;
          case 66: 
            { lexeme=yytext(); line=yyline; return BEGIN;
            }
          case 151: break;
          case 67: 
            { lexeme=yytext(); line=yyline; return LABEL;
            }
          case 152: break;
          case 68: 
            { lexeme=yytext(); line=yyline; return CONST;
            }
          case 153: break;
          case 69: 
            { lexeme=yytext(); line=yyline; return WRITE;
            }
          case 154: break;
          case 70: 
            { lexeme=yytext(); line=yyline; return WHILE;
            }
          case 155: break;
          case 71: 
            { lexeme=yytext(); line=yyline; return FALSE;
            }
          case 156: break;
          case 72: 
            { lexeme=yytext(); line=yyline; return UNTIL;
            }
          case 157: break;
          case 73: 
            { lexeme=yytext(); line=yyline; return RECORD;
            }
          case 158: break;
          case 74: 
            { lexeme=yytext(); line=yyline; return REPEAT;
            }
          case 159: break;
          case 75: 
            { lexeme=yytext(); line=yyline; return INLINE;
            }
          case 160: break;
          case 76: 
            { lexeme=yytext(); line=yyline; return STRING;
            }
          case 161: break;
          case 77: 
            { lexeme=yytext(); line=yyline; return DOWNTO;
            }
          case 162: break;
          case 78: 
            { lexeme=yytext(); line=yyline; return PACKED;
            }
          case 163: break;
          case 79: 
            { lexeme=yytext(); line=yyline; return BOOLEAN;
            }
          case 164: break;
          case 80: 
            { lexeme=yytext(); line=yyline; return LONGINT;
            }
          case 165: break;
          case 81: 
            { lexeme=yytext(); line=yyline; return FORWARD;
            }
          case 166: break;
          case 82: 
            { lexeme=yytext(); line=yyline; return PROGRAM;
            }
          case 167: break;
          case 83: 
            { lexeme=yytext(); line=yyline; return SHORTINT;
            }
          case 168: break;
          case 84: 
            { lexeme=yytext(); line=yyline; return FUNCTION;
            }
          case 169: break;
          case 85: 
            { lexeme=yytext(); line=yyline; return PROCEDURE;
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
