/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scanner;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;


import lexer.Lexer;
import java.util.TreeMap;
import  scanner.TokensTypes;

/**
 *
 * @author erosh
 */
public class Interfaz extends javax.swing.JFrame {

    ArrayList<objectToken> tokensArray;
    public Interfaz() {
        initComponents();
        TokensTypes.initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        labelTable = new javax.swing.JLabel();
        scanButton = new javax.swing.JButton();
        routeToFileField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scanner PCL");
        setResizable(false);

        labelText.setText("Ruta:");

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        labelTable.setText("Tabla de Tokens");

        scanButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        scanButton.setText("Obtener tokens");
        scanButton.setDoubleBuffered(true);
        scanButton.setEnabled(false);
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        routeToFileField.setText("Ruta a archivo...");
        routeToFileField.setToolTipText("Ruta al archivo pcl a leer");

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchButton.setText("Buscar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTable)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(routeToFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelText)
                    .addComponent(routeToFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(8, 8, 8)
                .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(labelTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        try {
            analizeLexer();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_scanButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            // TODO add your handling code here:
            this.seekFile();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    private void seekFile() throws IOException {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Only pcl files", "pcl");
        chooser.setFileFilter(filter);
        
        int output = chooser.showOpenDialog(this);
        String fileRoute = "";
        if (output == JFileChooser.APPROVE_OPTION) { //Se seleccionó archivo
            fileRoute = chooser.getSelectedFile().getAbsolutePath();
            System.out.println(fileRoute);
            routeToFileField.setText(fileRoute);
            scanButton.setEnabled(true);
        }
    }
    
    
    private String getTokenTable(){
        /*Devuelve un string que representará la tabla de tokens encontrados*/
        int numLineasTokenExiste;
        //Línea inicial
        String lineaAImprimir = "Token    TipoToken  Valor   (Línea)Apariciones por línea \n";
        
        String linea;
        String aparicionesLinea;
        //Recorre los tokens encontrados
        for (int i = 0; i<tokensArray.size(); i++){
            
            //Imprime el token encontrado
            lineaAImprimir += tokensArray.get(i).value +" "+TokensTypes.whichTypeStringIsIt(tokensArray.get(i).type)+" ";
            
            
            numLineasTokenExiste = tokensArray.get(i).rowsArray.size();
            //Itera por las líneas en las que apareció e imprime
            for (int j = 0; j<numLineasTokenExiste; j++){
                linea = tokensArray.get(i).rowsArray.get(j).lastEntry().getKey().toString();
                aparicionesLinea = tokensArray.get(i).rowsArray.get(j).lastEntry().getValue().toString();
                
                //Se añade los valores a la linea a imprimir
                lineaAImprimir+= "("+linea+")"+aparicionesLinea+" ";
            }
            lineaAImprimir+= "\n ";
        }
        return lineaAImprimir;   
    }
    
    private void analizeLexer() throws IOException {
        Reader reader = new BufferedReader (new FileReader(routeToFileField.getText()));
        Lexer lexer = new Lexer(reader);
        tokensArray = new ArrayList<>();
        String result = "";
        
        while (true){
            Token token = lexer.yylex();

            if (token == null) {
                result += this.getTokenTable();
                result = result + "Fin del archivo.";
                textArea.setText(result);
                return;
            }

            Integer contador;
            String valor  = lexer.lexeme;
            int linea = lexer.line;
            TreeMap<Integer, Integer> row = new TreeMap();
            int repeticiones;
            Boolean exists;
            
            switch (TokensTypes.whichTypeIsIt(token)) {
            /*
                1 = operador
                2 = palabra reservada
                3 = identificador
                4 = literal
                5 = Separador
                31 = Error ID (Largo)
                0 = Error
            */
                case 0: //Errores

                    result = result + "Error léxico en línea "+linea +", simbolo "+valor+" no reconocido. \n";
                    break;
                    
                case 31: //ErrorID    
                    
                    result = result + "Error léxico en línea "+linea +", Identificador:  "+valor+" contiene más de 127 caractéres. \n";
                    break;
                    
                case 1: //OPERADOR
                    repeticiones = 1;
                    row.put(linea, repeticiones);
                    exists = false;
                    
                    for (contador = 0; contador < tokensArray.size(); contador++){
                        if (tokensArray.size()!=0){
                           if (tokensArray.get(contador).value.equals(valor)) {
                            increaseRow(linea, contador, row);
                            exists = true;
                            break;
                            } 
                        }
                    }
                    
                    if (exists == false){
                        
                        objectToken objectToken = new objectToken(valor, token, row);
                        tokensArray.add(objectToken);
                    }
                    
                    //result = result + "TOKEN OPERADOR: " + token + " " + valor + " " + linea + "\n";
                    break;
                case 2: //PALABRA RESERVADA
                    repeticiones = 1;
                    row.put(linea, repeticiones);
                    exists = false;
                    
                    for (contador = 0; contador < tokensArray.size(); contador++){
                        if (tokensArray.size()!=0){
                           if (tokensArray.get(contador).value.equals(valor)) {
                            increaseRow(linea, contador, row);
                            exists = true;
                            break;
                            } 
                        }
                    }
                    
                    if (exists == false){
                        objectToken objectToken = new objectToken(valor, token, row);
                        tokensArray.add(objectToken);
                    }
                    
                    //result = result + "TOKEN PALABRA RESERVADA: " + token + " " + valor + " " + linea + "\n";
                    break;
                case 3: //Identificador
                    repeticiones = 1;
                    row.put(linea, repeticiones);
                    exists = false;
                    
                    for (contador = 0; contador < tokensArray.size(); contador++){
                        
                        //if (tokensArray.size()!=0){
                        if (tokensArray.get(contador).value.equals(valor)) {
                            increaseRow(linea, contador, row);
                            exists = true;
                            break;
                        } 
                       // }
                        
                    }
                    
                    if (exists == false){
                        objectToken objectToken = new objectToken(valor, token, row);
                        tokensArray.add(objectToken);
                    }
                    
                    //result = result + "TOKEN IDENTIFICADOR: " + token + " " + valor + " " + linea + "\n";
                    break;
                case 4: //Literal
                    repeticiones = 1;
                    row.put(linea, repeticiones);
                    exists = false;
                    
                    for (contador = 0; contador < tokensArray.size(); contador++){
                        if (tokensArray.size()!=0){
                           if (tokensArray.get(contador).value.equals(valor)) {
                            increaseRow(linea, contador, row);
                            exists = true;
                            break;
                            } 
                        }
                    }
                    
                    if (exists == false){
                        objectToken objectToken = new objectToken(valor, token, row);
                        tokensArray.add(objectToken);
                    }
                    
                    //result = result + "TOKEN LITERAL: " + token + " " + valor + " " + linea + "\n";
                    break;
                case 5: //Separador
                    repeticiones = 1;
                    row.put(linea, repeticiones);
                    exists = false;
                    
                    for (contador = 0; contador < tokensArray.size(); contador++){
                        if (tokensArray.size()!=0){
                           if (tokensArray.get(contador).value.equals(valor)) {
                            increaseRow(linea, contador, row);
                            exists = true;
                            break;
                            } 
                        }
                    }
                    
                    if (exists == false){
                        objectToken objectToken = new objectToken(valor, token, row);
                        tokensArray.add(objectToken);
                    }
                    
                    //result = result + "TOKEN SEPARADOR: " + token + " " + valor + " " + linea + "\n";
                    break;
                default:
                   // result = result + "TOKEN: " + token + "\n";
            }
        }
    }
    
    
    /*Position = Aparicion del token en X linea*/
    private void increaseRow(Integer linea, Integer position, TreeMap row){
        Integer contador;
        Boolean exists = false;
        
        for (contador = 0; contador < tokensArray.get(position).rowsArray.size(); contador++){
          
            Integer keyValue;
            ArrayList<TreeMap> lineasDondeTokenExiste =tokensArray.get(position).rowsArray;
            Set llaves = lineasDondeTokenExiste.get(contador).keySet();
            Object llaveDelSet = llaves.iterator().next();
            keyValue = Integer.parseInt(llaveDelSet.toString());
            if(keyValue.equals(linea)){
                Integer repeticiones = Integer.parseInt(tokensArray.get(position).rowsArray.get(contador).get(linea).toString());
                tokensArray.get(position).rowsArray.get(contador).put(linea, repeticiones + 1);
                exists = true;
            }
            break;
        }
        
        if (exists == false){ // Primera aparicion del token
            tokensArray.get(position).rowsArray.add(row);
        }
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTable;
    private javax.swing.JLabel labelText;
    private javax.swing.JTextField routeToFileField;
    private javax.swing.JButton scanButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
